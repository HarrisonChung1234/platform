{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { AIMarker } from 'vue-picture-bd-marker';\nimport axios from 'axios';\nimport Cookies from \"js-cookie\";\nimport VueUploadComponent from 'vue-upload-component';\nimport Draggable from 'vue-draggable-float';\n//引入组件库\n\nexport default {\n  name: 'stagePicPage',\n  components: {\n    'ui-marker': AIMarker,\n    'file-upload': VueUploadComponent,\n    // 'Suspend': Suspend,\n    Draggable\n  },\n  data() {\n    return {\n      modified: false,\n      already: false,\n      rightDistance: 0,\n      bottomDistance: 0,\n      loading_src: 'https://image.uisdc.com/wp-content/uploads/2015/05/load20150504-5.gif',\n      already_src: 'https://trademark.zbjimg.com/pattern-prod/2017/image_53/27078207.jpg',\n      highlight_id: 0,\n      // uuid的作用是用来区分每一张不同的图片，因为框选标注的插件需要\n      // uuid: '0da9130',\n      // filelist的作用是暂时存储我们要增添的图片，以便后端进行提交\n      selectedFile: null,\n      //currentInfo是当前正在进行标注的图片信息\n      currentInfo: {\n        currentBaseImage:\n        // 当前标注图像的地址\n        'https://image.uisdc.com/wp-content/uploads/2015/05/load20150504-5.gif',\n        rawW: 1200,\n        //当前标注图像的原始宽度、高度\n        rawH: 828,\n        currentW: 1134,\n        //当前标注图像在标注区压缩后的宽度、高度\n        currentH: 632,\n        uuid: '',\n        //与上面的uuid其实是同一个东西\n        // checked: false, // false表示当前图片还没有标记过\n\n        /*data是所有标注框信息的列表，id:标注框的id，实际产生我是通过getDate()获得的唯一数字，但在读取coco.json时忘记有没有这项了，没有就要自己加上唯一的id\r\n        tag_id是标签对应的id，tag_name标签名，剩下的是标注框的中心点坐标、宽高\r\n        data从pics中初始化，更新时先更新data，然后更新回pics，再传回后端*/\n        data: [\n          // {\n          //   id: 1,\n          //   tag_id: 1,\n          //   tag_name: \"diaose\",\n          //   x_ul: 100,\n          //   y_ul: 200,\n          //   wid: 50,\n          //   hei: 50\n          // },\n        ] // 表示图片矩形标记信息\n      },\n\n      // pics是所有的图片信息，我们需要在增删图片、修改标注时维护这部分内容，初始时通过后端接口获得这部分内容，但其实仅修改标注时不维护，直接将修改的信息上传后端就行，待定\n      // 同时，这部分的初始化是通过读取整个annotation文件得到的，annotation里面不止这几个项，其余的项我的想法是放在与下面pics平行的位置，用一个rest来暂存多余内容，在我们修改完标注后结合pics和data\n      pics: [\n        // {\n        //   cropImage: 'https://seopic.699pic.com/photo/50041/3365.jpg_wh1200.jpg',\n        //   annotations: [\n        //     { id: 1, catagory_id: 0, bbox: [11, 22, 10, 5] },\n        //     { id: 2, catagory_id: 1, bbox: [35, 44, 20, 14] }\n        //   ]\n        // },\n      ],\n      altURL: 'https://img-qn.51miz.com/2018/02/08/06/2018020806948082_P1330830_60ced2dfO.jpg',\n      active: 0,\n      // 当前图片序号\n      picTotal: 10,\n      // 照片总数，需要在初始时进行加载\n\n      // 所有的标签名及其id\n      tags: [\n        // {\n        //   tagName: '缺陷',\n        //   tag: '0x0001'\n        // },\n      ],\n      //下面的几个内容不用管，都是插件使用的部分\n      allInfo: [],\n      // 图片的矩形标记信息集合\n      imageInfo: [],\n      // 存储图片原始信息\n\n      innerVisible: false,\n      innerForm: {\n        tagName: '',\n        tag: ''\n      },\n      tep_rules: {\n        tagName: [{\n          required: true,\n          message: '请输入',\n          trigger: 'blur'\n        }],\n        tag: [{\n          required: true,\n          message: '请输入',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: {},\n  created() {\n    this.init_pics();\n  },\n  mounted() {\n    window.addEventListener(\"beforeunload\", this.leaveconfirm, false);\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n    // 计算距离右边整个屏幕宽度的80%的距离\n    this.rightDistance = screenWidth * 0.65;\n    // 计算距离底部整个屏幕高度的10%的距离\n    this.bottomDistance = screenHeight * 0.08;\n  },\n  beforeDestroy() {\n    window.addEventListener(\"beforeunload\", this.leaveconfirm, false);\n  },\n  beforeRouteLeave(to, from, next) {\n    if (this.modified) {\n      // 此处为个人项目条件判断，当条件成立时才执行路由守卫\n      this.$confirm('当前信息未保存，离开页面将会放弃所有修改数据，', '提示', {\n        closeOnClickModal: false,\n        confirmButtonText: '保存',\n        cancelButtonText: '保存',\n        type: 'warning'\n      }).then(() => {\n        // 点击确定则往下执行\n        //this.saveAll()\n        next();\n      }).catch(() => {\n        // 取消则关闭弹窗不执行\n      });\n    } else {\n      // 条件不成立则继续往下执行\n      next();\n    }\n  },\n  methods: {\n    leaveconfirm(event) {\n      if (this.modified) {\n        event.preventDefault();\n        event.returnValue = '您在页面编辑了未保存，是否确认离开';\n        return '您在页面编辑了未保存，是否确认离开';\n      }\n    },\n    handleFileInputClick() {\n      this.$refs.fileInput.click(); // 触发文件选择输入框的点击事件\n    },\n\n    saveAll() {\n      const formData = new FormData();\n      axios.post('http://127.0.0.1:5000/Dataset/save', formData, {\n        headers: {\n          'Authorization': 'Bearer ' + Cookies.get('token')\n        }\n      }).then(res => {\n        console.log('保存所有信息到后端');\n        this.modified = false;\n        this.$router.push('/user');\n      }).catch(error => {\n        console.log('保存所有信息失败', error);\n        return null;\n      });\n    },\n    saveAnno() {\n      const formData = new FormData();\n      formData.append(\"image_id\", this.currentInfo.uuid);\n      var list = [];\n      for (let i = 0; i < this.currentInfo.data.length; i++) {\n        var box = [];\n        box.push(this.currentInfo.data[i].x_ul);\n        box.push(this.currentInfo.data[i].y_ul);\n        box.push(this.currentInfo.data[i].wid);\n        box.push(this.currentInfo.data[i].hei);\n        let obj = {\n          area: this.currentInfo.data[i].area,\n          iscrowd: this.currentInfo.data[i].iscrowd,\n          image_id: this.currentInfo.uuid,\n          bbox: box,\n          category_id: this.currentInfo.data[i].tag_id,\n          id: this.currentInfo.data[i].id,\n          ignore: this.currentInfo.data[i].ignore,\n          segmentation: this.currentInfo.data[i].segmentation\n        };\n        list.push(obj);\n      }\n      formData.append(\"annotations\", JSON.stringify(list));\n      axios.post(\"http://127.0.0.1:5000/Dataset/workspace/modify-annotation\", formData, {\n        headers: {\n          'Authorization': 'Bearer ' + Cookies.get('token')\n        }\n      }).then(res => {\n        console.log(\"保存所有标注信息到后端成功\");\n        this.modified = true;\n      }).catch(error => {\n        console.log(\"保存所有标注信息到后端失败\", error);\n        return null;\n      });\n    },\n    handleFileChange(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    // 上传文件\n    uploadFile() {\n      const formData = new FormData();\n      formData.append('proc_type', 'add');\n      formData.append('data_type', 'image');\n      formData.append('image', this.selectedFile);\n\n      // 使用 axios 或其他 HTTP 客户端库发送 POST 请求到后端\n      // 你需要替换下面的 URL 为后端接收上传的 API 端点\n      axios.post('http://127.0.0.1:5000/Dataset/workspace/modify', formData, {\n        headers: {\n          'Authorization': 'Bearer ' + Cookies.get('token'),\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => {\n        // 处理成功上传后的响应\n        console.log('上传成功', response.data);\n        var id_new = response.data.image_id;\n        let url_new = \"http://127.0.0.1:5000/Dataset/workspace/image/\" + id_new;\n        axios.get(url_new, {\n          headers: {\n            'Authorization': 'Bearer ' + Cookies.get('token')\n          },\n          responseType: 'blob'\n        }).then(res => {\n          let blob = new Blob([res.data]);\n          console.log(blob, \"BLOB\");\n          let image_url = URL.createObjectURL(blob);\n          this.pics.push({\n            id: id_new,\n            url: image_url\n          });\n          console.log(\"更新pics成功\");\n          this.modified = true;\n        }).catch(error => {\n          console.log(\"更新pics出错\", error);\n          return null;\n        });\n      }).catch(error => {\n        // 处理上传失败的情况\n        console.error('上传失败', error);\n      });\n    },\n    init_pics() {\n      axios.get('http://127.0.0.1:5000/Dataset/workspace', {\n        headers: {\n          'Authorization': 'Bearer ' + Cookies.get('token')\n        }\n      }).then(res => {\n        console.log(res, \"相应信息\");\n        //需要更新的信息有：pics，active，picTotal，tags\n        this.picTotal = res.data.image_count;\n        console.log(this.picTotal, \"图片总数\");\n        this.active = 0;\n        var id_list = res.data.image_ids;\n        console.log(id_list, \"id列表\");\n        const baseurl = \"http://127.0.0.1:5000/Dataset/workspace/image/\";\n        var urlset = id_list.map(number => {\n          return baseurl + number;\n        });\n        let cate = res.data.categories;\n        for (let i = 0; i < cate.length; i++) {\n          var item = cate[i];\n          var newTag = {\n            tagName: item.name,\n            tag: item.id\n          };\n          this.tags.push(newTag);\n        }\n\n        // 使用Promise.all来等待所有图像请求完成\n        Promise.all(urlset.map(url => {\n          return axios.get(url, {\n            headers: {\n              'Authorization': 'Bearer ' + Cookies.get('token')\n            },\n            responseType: 'blob'\n          }).then(res => {\n            let blob = new Blob([res.data]);\n            console.log(blob, \"BLOB\");\n            let image_url = URL.createObjectURL(blob);\n            console.log(image_url, \"IMAGE_URL\");\n            return image_url;\n          }).catch(error => {\n            console.log(\"获取图片出错\", error);\n            return null;\n          });\n        })).then(imgUrls => {\n          // imgUrls数组中包含了所有图像的URL，按照顺序与id_list对应\n          for (let i = 0; i < id_list.length; i++) {\n            let id_ = id_list[i];\n            let url_ = imgUrls[i];\n            let obj = {\n              id: id_,\n              url: url_\n            };\n            this.pics.push(obj);\n          }\n          this.currentInfo.currentBaseImage = this.already_src;\n          console.log(this.pics, \"pics\");\n        });\n      });\n    },\n    highlight(id) {\n      var canvas = document.getElementById(\"highlighted\");\n      var ctx = canvas.getContext(\"2d\");\n      console.log(\"hightlight\", id);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      for (const box of this.currentInfo.data) {\n        if (box.id === id) {\n          ctx.strokeStyle = 'yellow';\n          ctx.lineWidth = 4;\n          console.log(box.x_ul, box.y_ul, box.wid, box.hei);\n          ctx.strokeRect(box.x_ul, box.y_ul, box.wid, box.hei);\n          this.highlight_id = id;\n        }\n      }\n    },\n    //canvas基础的画框操作\n    drawBoxes() {\n      var canvas = document.getElementById(\"anno_canvas\");\n      var ctx = canvas.getContext(\"2d\");\n      console.log(\"drawBoxes\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      for (const box of this.currentInfo.data) {\n        ctx.strokeStyle = 'red';\n        ctx.lineWidth = 2;\n        console.log(box.x_ul, box.y_ul, box.wid, box.hei);\n        ctx.strokeRect(box.x_ul, box.y_ul, box.wid, box.hei);\n      }\n      console.log(this.currentInfo.data);\n    },\n    //标注框的删除函数\n    del_anno(id) {\n      this.currentInfo.data = this.currentInfo.data.filter(item => item.id !== id);\n      if (this.highlight_id === id) {\n        var canvas = document.getElementById(\"highlighted\");\n        var ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      this.drawBoxes();\n      this.modified = true;\n    },\n    //-----------------------------------------------------------------------------这部分为插件所需要的函数---------------------------------------------------------------------\n    /**记录图片当前的大小和原始大小 data={rawW,rawH,currentW,currentH} */\n    onImageLoad(data) {\n      console.log(data);\n      this.imageInfo = data;\n    },\n    // 当控件准备完成后回调，参数为 uniqueKey\n    onReady() {\n      console.log(\"onready\");\n      // let markerDiv = document.getElementsByClassName('vmr-ai-panel')\n      // let innnerDiv = markerDiv[0].firstChild\n      // let markerImg = document.getElementsByClassName('vmr-ai-raw-image')\n      // let markerMask = document.getElementsByClassName('vmr-ai-raw-image-mask')\n      // markerDiv[0].setAttribute('style', 'position: relative; overflow: hidden; width: 60%; height: 60%;')\n      // innnerDiv.setAttribute('style', 'position: relative; overflow: hidden;')\n      // markerImg[0].setAttribute('style', 'display: block; position: absolute; user-select: none; width:700px; height: 500px;')\n      // markerMask[0].setAttribute('style', 'user-select: none; position: absolute; cursor: crosshair; left: 0px; top: 0px;width:700px; height: 500px;')\n    },\n\n    /**\r\n    * 画框后回调,data 和 uniqueKey先不用了\r\n    */\n    onDrawOne(data, uniqueKey) {\n      if (!this.selected.name || !this.selected.value) {\n        this.$message.info('请先设置标签');\n        this.$refs['aiPanel-editor'].getMarker().clearData();\n        return;\n      }\n      let name = data.tagName === '请选择或添加新标签' ? this.selected.name : data.tagName;\n      let tagValue = data.tagName === '请选择或添加新标签' ? this.selected.value : data.tag;\n      this.$refs['aiPanel-editor'].getMarker().setTag({\n        tagName: name,\n        tag: tagValue\n      });\n      console.log(\"onDrawOne\", uniqueKey);\n    },\n    /**\r\n     * 当选中图片上的标注框时回调，参数为data【标注数据】, uniqueKey\r\n     */\n    selectOne(uniqueKey) {\n      console.log(\"selectOne\", uniqueKey, this.data);\n    },\n    /**\r\n     * 当标注框位置或者标框属性发生改动时回调，参数为data【标注数据】, uniqueKey\r\n     */\n    onUpdated(data, uniqueKey) {\n      console.log(\"onUpdated\", uniqueKey, data);\n    },\n    setTag(v) {\n      this.$refs['aiPanel-editor'].getMarker().setTag(v);\n    },\n    addTag() {\n      this.innerVisible = true;\n      this.innerForm.tagName = '';\n      this.innerForm.tag = '';\n    },\n    delTag(index, tag_id) {\n      this.tags.splice(index, 1);\n      const formData = new FormData();\n      formData.append('proc_type', 'delete');\n      formData.append('data_type', 'category');\n      formData.append('id', tag_id);\n      // 使用 axios 或其他 HTTP 客户端库发送 POST 请求到后端\n      // 你需要替换下面的 URL 为后端接收上传的 API 端点\n      axios.post('http://127.0.0.1:5000/Dataset/workspace/modify', formData, {\n        headers: {\n          'Authorization': 'Bearer ' + Cookies.get('token')\n        }\n      }).then(response => {\n        // 处理成功上传后的响应\n        console.log('删除成功', response.data);\n        this.modified = true;\n      }).catch(error => {\n        // 处理上传失败的情况\n        console.error('删除失败', error);\n      });\n    },\n    close() {\n      this.innerVisible = false;\n      this.$refs['innerForm'].resetFields();\n    },\n    beforeClose(done) {\n      this.$refs['innerForm'].resetFields();\n      done();\n    },\n    //-----------------------------------------------------------------------------这部分为插件所需要的函数---------------------------------------------------------------------\n\n    // 添加标签的函数\n    createForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          for (let index in this.tags) {\n            let item = this.tags[index];\n            if (item.tagName === this.innerForm.tagName\n            // || item.tag === this.innerForm.tag\n            ) {\n              this.$message.warning('标签名已存在，请重新输入');\n              return;\n            }\n          }\n          const formData = new FormData();\n          formData.append('proc_type', 'add');\n          formData.append('data_type', 'category');\n          let obj = {\n            supercategory: \"none\",\n            id: 0,\n            name: this.innerForm.tagName\n          };\n          formData.append('category', JSON.stringify(obj));\n          console.log(formData, \"传入表单数据\");\n\n          // 使用 axios 或其他 HTTP 客户端库发送 POST 请求到后端\n          // 你需要替换下面的 URL 为后端接收上传的 API 端点\n          axios.post('http://127.0.0.1:5000/Dataset/workspace/modify', formData, {\n            headers: {\n              'Authorization': 'Bearer ' + Cookies.get('token')\n            }\n          }).then(response => {\n            // 处理成功上传后的响应\n            console.log('新增成功', response.data);\n            this.innerForm.tag = response.data.category_id;\n            this.tags.push({\n              tagName: this.innerForm.tagName,\n              tag: this.innerForm.tag\n            });\n            this.modified = true;\n          }).catch(error => {\n            // 处理上传失败的情况\n            console.error('新增失败', error);\n          });\n          this.innerVisible = false;\n        }\n      });\n    },\n    //完成标记，提交标记集合，目前仅提交到data，未更新至pics乃至后端\n    submitForm() {\n      console.log(this.$refs['aiPanel-editor']);\n      let data = this.$refs['aiPanel-editor'].getMarker().getData();\n      this.allInfo = data;\n      console.log(this.allInfo);\n      let size = {\n        width: this.imageInfo.rawW,\n        height: this.imageInfo.rawH\n      };\n      console.log(size.width, size.height);\n      console.log(this.currentW, this.currentH);\n      let x_ul = Math.round(parseFloat(this.allInfo[0].position.x.substring(0, this.allInfo[0].position.x.length - 1)) * size.width / 100);\n      let y_ul = Math.round(parseFloat(this.allInfo[0].position.y.substring(0, this.allInfo[0].position.y.length - 1)) * size.height / 100);\n      console.log('左上角点坐标', \"(\", x_ul, y_ul, \")\");\n      let width = Math.round((parseFloat(this.allInfo[0].position.x1.substring(0, this.allInfo[0].position.x1.length - 1)) - parseFloat(this.allInfo[0].position.x.substring(0, this.allInfo[0].position.x.length - 1))) * size.width / 100);\n      let height = Math.round((parseFloat(this.allInfo[0].position.y1.substring(0, this.allInfo[0].position.y1.length - 1)) - parseFloat(this.allInfo[0].position.y.substring(0, this.allInfo[0].position.y.length - 1))) * size.height / 100);\n      console.log(width, height, \"宽度x高度\");\n      let newObj = {\n        id: new Date().getTime(),\n        tag_id: this.allInfo[0].tag,\n        tag_name: this.allInfo[0].tagName,\n        x_ul: x_ul,\n        y_ul: y_ul,\n        wid: width,\n        hei: height,\n        area: width * height,\n        iscrowd: 0,\n        ignore: 0,\n        segmentation: []\n      };\n      this.currentInfo.data.push(newObj);\n      // 将提交的标注框进行删除\n      console.log(this.currentInfo.data);\n      this.$refs['aiPanel-editor'].getMarker().clearData();\n      console.log(this.currentInfo.data);\n      this.drawBoxes();\n      this.modified = true;\n    },\n    // 点击左右按钮显示更多\n    showMore(v) {\n      let el = this.$refs.picContainer;\n      // let percent = (this.active / this.pics.length) * 100\n      if (v == 'up') {\n        this.active++;\n        if (this.active >= this.picTotal - 3) {\n          // 最后4张图\n          this.active = this.pics.length - 3;\n          return;\n        }\n        if (this.pics.length - 3 == this.active && this.pics.length < this.picTotal) {\n          this.photoPageIndex++;\n          this.getPhotos();\n          return;\n        }\n      } else {\n        this.active--;\n        if (this.active < 0) this.active = 0;\n      }\n      el.style.transform = 'translateX(-' + this.active / this.pics.length * 100 + '%)';\n    },\n    //搭配showmore展示所有图片\n    getPhotos() {\n      this.$nextTick(() => {\n        let el = this.$refs.picContainer;\n        if (el) {\n          el.style.width = el.scrollWidth + 'px';\n          el.style.transform = 'translateX(-' + this.active / this.pics.length * 100 + '%)';\n        }\n      });\n    },\n    /**得到当前点击图片，将信息更新到currentInfo*/\n\n    activePic(v, currentIndex, arrayId) {\n      // 写回data\n      if (this.currentInfo.currentBaseImage != v) {\n        var canvas = document.getElementById(\"highlighted\");\n        var ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        this.currentInfo.data = [];\n        this.currentInfo.currentBaseImage = v;\n        this.active = arrayId;\n        // const fileExtension = '.jpg_wh1200.jpg'\n        // const extensionIndex = this.currentInfo.currentBaseImage.lastIndexOf(fileExtension)\n\n        // if (extensionIndex !== -1) {\n        //   const startIndex = Math.max(extensionIndex - 5, 0)\n        //   this.currentInfo.uuid = this.currentInfo.currentBaseImage.slice(startIndex, extensionIndex)\n        // }\n        this.currentInfo.uuid = currentIndex;\n        console.log(this.currentInfo.uuid, \"图片编号\");\n        // 获取图片的原始宽高\n        let attr_url = 'http://127.0.0.1:5000/Dataset/workspace/image-attribute/' + this.currentInfo.uuid;\n        console.log(attr_url, \"访问属性的url\");\n        axios.get(attr_url, {\n          headers: {\n            'Authorization': 'Bearer ' + Cookies.get('token')\n          }\n        }).then(res => {\n          this.currentInfo.rawH = res.data.image_attribute.height;\n          this.currentInfo.rawW = res.data.image_attribute.width;\n        }).catch(error => {\n          console.log(error, \"获取图片长宽失败\");\n          return null;\n        });\n        console.log(this.currentInfo);\n        // console.log(this.currentInfo.uuid)\n\n        let anno_url = 'http://127.0.0.1:5000/Dataset/workspace/annotation/' + this.currentInfo.uuid;\n        axios.get(anno_url, {\n          headers: {\n            'Authorization': 'Bearer ' + Cookies.get('token')\n          }\n        }).then(res => {\n          console.log(res.data.annotations, \"标注信息\");\n          for (let i = 0; i < res.data.annotations.length; i++) {\n            let item = res.data.annotations[i];\n            // console.log(item,\"项目\")\n            var name = \"\";\n            // console.log(this.tags, \"全部标签\")\n            for (let j = 0; j < this.tags.length; j++) {\n              if (this.tags[j].tag == item.category_id) {\n                name = this.tags[j].tagName;\n                break;\n              }\n            }\n            ;\n            let newAnno = {\n              id: item.id,\n              tag_id: item.category_id,\n              tag_name: name,\n              x_ul: item.bbox[0],\n              y_ul: item.bbox[1],\n              wid: item.bbox[2],\n              hei: item.bbox[3],\n              area: item.area,\n              iscrowd: item.iscrowd,\n              ignore: item.ignore,\n              segmentation: item.segmentation\n            };\n            this.currentInfo.data.push(newAnno);\n          }\n          console.log(this.currentInfo.data, \"后端导入数据集成功\");\n          this.drawBoxes();\n        }).catch(error => {\n          console.log(error, \"获取图片标注信息失败\");\n          return null;\n        });\n      }\n    },\n    // handleChange(label) {\n    //   console.log(label)\n    // },\n\n    // 此处要有删除图片的操作实现\n    delPic() {\n      if (this.active < 0) {\n        alert('请先选择一张图片再进行删除');\n      } else {\n        this.pics.splice(this.active, 1);\n        this.active = -1;\n        this.currentInfo.currentBaseImage = this.altURL;\n        //发信号给后端\n        const formData = new FormData();\n        formData.append('proc_type', 'delete');\n        formData.append('data_type', 'image');\n        formData.append('id', this.currentInfo.uuid);\n\n        // 使用 axios 或其他 HTTP 客户端库发送 POST 请求到后端\n        // 你需要替换下面的 URL 为后端接收上传的 API 端点\n        axios.post('http://127.0.0.1:5000/Dataset/workspace/modify', formData, {\n          headers: {\n            'Authorization': 'Bearer ' + Cookies.get('token')\n          }\n        }).then(response => {\n          // 处理成功上传后的响应\n          console.log('删除成功', response.data);\n          this.modified = true;\n        }).catch(error => {\n          // 处理上传失败的情况\n          console.error('删除失败', error);\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["AIMarker","axios","Cookies","VueUploadComponent","Draggable","name","components","data","modified","already","rightDistance","bottomDistance","loading_src","already_src","highlight_id","selectedFile","currentInfo","currentBaseImage","rawW","rawH","currentW","currentH","uuid","pics","altURL","active","picTotal","tags","allInfo","imageInfo","innerVisible","innerForm","tagName","tag","tep_rules","required","message","trigger","computed","created","init_pics","mounted","window","addEventListener","leaveconfirm","screenWidth","innerWidth","screenHeight","innerHeight","beforeDestroy","beforeRouteLeave","to","from","next","$confirm","closeOnClickModal","confirmButtonText","cancelButtonText","type","then","catch","methods","event","preventDefault","returnValue","handleFileInputClick","$refs","fileInput","click","saveAll","formData","FormData","post","headers","get","res","console","log","$router","push","error","saveAnno","append","list","i","length","box","x_ul","y_ul","wid","hei","obj","area","iscrowd","image_id","bbox","category_id","tag_id","id","ignore","segmentation","JSON","stringify","handleFileChange","target","files","uploadFile","response","id_new","url_new","responseType","blob","Blob","image_url","URL","createObjectURL","url","image_count","id_list","image_ids","baseurl","urlset","map","number","cate","categories","item","newTag","Promise","all","imgUrls","id_","url_","highlight","canvas","document","getElementById","ctx","getContext","clearRect","width","height","strokeStyle","lineWidth","strokeRect","drawBoxes","del_anno","filter","onImageLoad","onReady","onDrawOne","uniqueKey","selected","value","$message","info","getMarker","clearData","tagValue","setTag","selectOne","onUpdated","v","addTag","delTag","index","splice","close","resetFields","beforeClose","done","createForm","formName","validate","valid","warning","supercategory","submitForm","getData","size","Math","round","parseFloat","position","x","substring","y","x1","y1","newObj","Date","getTime","tag_name","showMore","el","picContainer","photoPageIndex","getPhotos","style","transform","$nextTick","scrollWidth","activePic","currentIndex","arrayId","attr_url","image_attribute","anno_url","annotations","j","newAnno","delPic","alert"],"sources":["src/views/MarkPic.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-page\">\r\n    <!-- 图片预览 -->\r\n    <div class=\"pics\">\r\n      <div class=\"arrow arrow-left\" @click=\"showMore('down')\"></div>\r\n      <div class=\"pic-container\">\r\n        <div class=\"pic-box\" ref=\"picContainer\">\r\n          <div class=\"pic\" v-for=\"(v, i) in pics\" :key=\"i\">\r\n            <div class=\"info\" :style=\"{ 'background-image': 'url(' + v.url + ')' }\"\r\n              @click=\"activePic(v.url, v.id, i)\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"arrow arrow-right\" @click=\"showMore('up')\"></div>\r\n    </div>\r\n\r\n    <el-row :gutter=\"10\" class=\"tagList\" type=\"flex\">\r\n      <draggable\r\n        :distanceRight=rightDistance\r\n        :distanceBottom=bottomDistance\r\n        :isScrollHidden='false' \r\n        :isCanDraggable='true'\r\n        :zIndex=\"100\">\r\n          <div>\r\n            <el-container class=\"custom-container\">\r\n              <el-row class=\"button-row\" type=\"flex\">\r\n                <el-col>\r\n                  <el-button v-popover:popover1 class=\"vertical-button\" type=\"primary\" icon=\"el-icon-picture\" size=\"small\" @click=\"handleFileInputClick\"></el-button>\r\n                  <el-popover\r\n                    ref=\"popover1\"\r\n                    trigger=\"hover\" \r\n                    placement=\"top\"\r\n                    width=\"50\"\r\n                  >\r\n                  <p>选择图片</p>\r\n                  </el-popover>\r\n                  <input\r\n                    type=\"file\"\r\n                    ref=\"fileInput\"\r\n                    style=\"display: none;\"\r\n                    @change=\"handleFileChange\"\r\n                  />\r\n                </el-col>\r\n              <el-col>\r\n              <el-button v-popover:popover2 class=\"vertical-button\" type=\"primary\" icon=\"el-icon-upload\" size=\"small\" @click=\"uploadFile\"></el-button>\r\n              <el-popover\r\n                    ref=\"popover2\"\r\n                    trigger=\"hover\" \r\n                    placement=\"top\"\r\n                    width=\"50\"\r\n                  >\r\n                  <p>上传图片</p>\r\n                  </el-popover>\r\n              </el-col>\r\n              <el-col>\r\n              <el-button v-popover:popover3 class=\"vertical-button\" type=\"primary\" icon=\"el-icon-delete\" size=\"small\" @click=\"delPic\"></el-button>\r\n              <el-popover\r\n                    ref=\"popover3\"\r\n                    trigger=\"hover\" \r\n                    placement=\"top\"\r\n                    width=\"50\"\r\n                  >\r\n                  <p>删除图片</p>\r\n                  </el-popover>\r\n              </el-col>\r\n            </el-row>\r\n            <el-row class=\"button-row\" type=\"flex\">\r\n              <el-col>\r\n              <el-button v-popover:popover4 class=\"vertical-button\" type=\"primary\" icon=\"el-icon-full-screen\" size=\"small\" @click=\"addTag\"></el-button>\r\n              <el-popover\r\n                    ref=\"popover4\"\r\n                    trigger=\"hover\" \r\n                    placement=\"top\"\r\n                    width=\"50\"\r\n                  >\r\n                  <p>新增标签类别</p>\r\n                  </el-popover>\r\n              </el-col>\r\n              <el-col>\r\n              <el-button v-popover:popover5 class=\"vertical-button\" type=\"primary\" icon=\"el-icon-circle-check\" size=\"small\" @click=\"submitForm\"></el-button>\r\n              <el-popover\r\n                    ref=\"popover5\"\r\n                    trigger=\"hover\" \r\n                    placement=\"top\"\r\n                    width=\"50\"\r\n                  >\r\n                  <p>确认标注</p>\r\n                  </el-popover>\r\n              </el-col>\r\n              <el-col>\r\n              <el-button v-popover:popover6 class=\"vertical-button\" type=\"primary\" icon=\"el-icon-folder-checked\" size=\"small\" @click=\"saveAnno\"></el-button>\r\n              <el-popover\r\n                    ref=\"popover6\"\r\n                    trigger=\"hover\" \r\n                    placement=\"top\"\r\n                    width=\"50\"\r\n                  >\r\n                  <p>保存标注</p>\r\n                  </el-popover>\r\n              </el-col>\r\n\r\n            </el-row>\r\n            </el-container>\r\n          </div>\r\n      </draggable>\r\n\r\n\r\n      <el-col :span=\"12\" class=\"thirdPart\">\r\n        <div class=\"height-control\">\r\n        <ui-marker ref=\"aiPanel-editor\" class=\"ai-observer\" :uniqueKey=\"currentInfo.uuid\" :ratio=\"currentInfo.rawW / currentInfo.rawH\"\r\n          :imgUrl=\"currentInfo.currentBaseImage\" @vmarker:selectOne=\"selectOne\" @vmarker:onUpdated=\"onUpdated\"\r\n          @vmarker:onDrawOne=\"onDrawOne\" @vmarker:onReady=\"onReady\" @vmarker:onImageLoad=\"onImageLoad\"></ui-marker>\r\n        <!-- <canvas ref=\"canvas\" width=\"currentInfo.currentW\" height=\"currentInfo.currentH\"></canvas> -->\r\n        </div>\r\n      </el-col>\r\n\r\n\r\n\r\n\r\n\r\n      <el-col :span=\"7\" class=\"firstPart\">\r\n        <div class=\"img-container\">\r\n            <img :src=\"currentInfo.currentBaseImage\" class=\"limited-image\">\r\n            <canvas id=\"anno_canvas\" :width=\"currentInfo.rawW\" :height=\"currentInfo.rawH\"></canvas>\r\n            <canvas id=\"highlighted\" :width=\"currentInfo.rawW\" :height=\"currentInfo.rawH\" ></canvas>\r\n        </div>\r\n      </el-col>\r\n\r\n\r\n      <el-col :span=\"5\" class=\"secondPart\">\r\n        <el-button type=\"success\" class=\"save-button\" @click=\"saveAll\">保存</el-button>\r\n        <div class=\"title\">标签栏</div>\r\n          <el-table :data=\"tags\" max-height=\"200\" border style=\"width: 100%\" :show-header=\"false\">\r\n            <el-table-column label=\"类别\" width=\"150\">\r\n              <template slot-scope=\"scope\">\r\n              <el-tag size=\"small\" @click=\"setTag(scope.row)\">{{ scope.row.tagName }}</el-tag>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"操作\" >\r\n              <template slot-scope=\"scope\">\r\n                <i class=\"el-icon-delete\" @click=\"delTag(scope.$index, scope.row.tag)\"></i>\r\n              </template>      \r\n            </el-table-column>\r\n          </el-table>\r\n        <!-- <div class=\"tags\" v-for=\"(v, i) in tags\" :key=\"i\">\r\n          <el-tag size=\"small\" @click=\"setTag(v)\">\r\n            {{ v.tagName }}\r\n          </el-tag>\r\n          <i class=\"el-icon-delete\" @click=\"delTag(i, v.tag)\"></i>\r\n        </div> -->\r\n        <div class=\"title\">标注信息</div>\r\n        <div class=\"annos\">\r\n          <el-table :data=\"currentInfo.data\" max-height=\"300\" border style=\"width: 100%\">\r\n            <el-table-column label=\"id\" width=\"50\">\r\n              <template slot-scope=\"scope\">\r\n                <span style=\"margin-left: 10px\">{{ scope.$index + 1}}</span>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"类别\" width=\"120\">\r\n              <!-- <template slot-scope=\"scope\">\r\n                <span style=\"margin-left: 10px\">{{ id2category(scope.row.tag_id)}}</span>\r\n              </template> -->\r\n              <template slot-scope=\"scope\">\r\n                <el-popover trigger=\"hover\" placement=\"top\">\r\n                  <p>左上角x: {{ scope.row.x_ul }}</p>\r\n                  <p>左上角y: {{ scope.row.y_ul }}</p>\r\n                  <p>宽度w: {{ scope.row.wid }}</p>\r\n                  <p>高度h: {{ scope.row.hei }}</p>\r\n                  <div slot=\"reference\" class=\"name-wrapper\">\r\n                    <el-tag size=\"medium\">{{ scope.row.tag_name }}</el-tag>\r\n                  </div>\r\n                </el-popover>\r\n              </template>\r\n            </el-table-column>\r\n\r\n            <el-table-column fixed=\"right\" label=\"操作\" width=\"100\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button @click=\"highlight(scope.row.id)\" type=\"text\" size=\"small\">查看</el-button>\r\n                <el-button @click=\"del_anno(scope.row.id)\" type=\"text\" size=\"small\">删除</el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </div>\r\n      </el-col>\r\n      \r\n    </el-row>\r\n\r\n    <!-- 添加标签 dialog -->\r\n    <el-dialog width=\"30%\" title=\"添加标签\" :visible.sync=\"innerVisible\" :before-close=\"beforeClose\">\r\n      <el-form ref=\"innerForm\" :model=\"innerForm\" :rules=\"tep_rules\">\r\n        <el-form-item label=\"标签名称：\" prop=\"tagName\">\r\n          <el-input v-model=\"innerForm.tagName\" />\r\n        </el-form-item>\r\n        <!-- <el-form-item label=\"标签id: \" prop=\"tag\">\r\n          <el-input v-model=\"innerForm.tag\" />\r\n        </el-form-item> -->\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"close\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"createForm('innerForm')\">\r\n          确 定\r\n        </el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n<script>\r\n\r\nimport { AIMarker } from 'vue-picture-bd-marker'\r\nimport axios from 'axios';\r\nimport Cookies from \"js-cookie\"\r\nimport VueUploadComponent from 'vue-upload-component';\r\nimport Draggable from 'vue-draggable-float'\r\n//引入组件库\r\n\r\n\r\n\r\nexport default {\r\n  name: 'stagePicPage',\r\n  components: { \r\n    'ui-marker': AIMarker,\r\n    'file-upload': VueUploadComponent,\r\n    // 'Suspend': Suspend,\r\n    Draggable,\r\n },\r\n  data() {\r\n    return {\r\n      modified: false,\r\n      already: false,\r\n      rightDistance: 0,\r\n      bottomDistance: 0,\r\n      loading_src: 'https://image.uisdc.com/wp-content/uploads/2015/05/load20150504-5.gif',\r\n      already_src: 'https://trademark.zbjimg.com/pattern-prod/2017/image_53/27078207.jpg',\r\n\r\n      highlight_id: 0,\r\n      // uuid的作用是用来区分每一张不同的图片，因为框选标注的插件需要\r\n      // uuid: '0da9130',\r\n      // filelist的作用是暂时存储我们要增添的图片，以便后端进行提交\r\n      selectedFile: null,\r\n      //currentInfo是当前正在进行标注的图片信息\r\n      currentInfo: {\r\n        currentBaseImage:// 当前标注图像的地址\r\n          'https://image.uisdc.com/wp-content/uploads/2015/05/load20150504-5.gif',\r\n        rawW: 1200,//当前标注图像的原始宽度、高度\r\n        rawH: 828,\r\n        currentW: 1134,//当前标注图像在标注区压缩后的宽度、高度\r\n        currentH: 632,\r\n        uuid: '',//与上面的uuid其实是同一个东西\r\n        // checked: false, // false表示当前图片还没有标记过\r\n\r\n        /*data是所有标注框信息的列表，id:标注框的id，实际产生我是通过getDate()获得的唯一数字，但在读取coco.json时忘记有没有这项了，没有就要自己加上唯一的id\r\n        tag_id是标签对应的id，tag_name标签名，剩下的是标注框的中心点坐标、宽高\r\n        data从pics中初始化，更新时先更新data，然后更新回pics，再传回后端*/\r\n        data: [\r\n          // {\r\n          //   id: 1,\r\n          //   tag_id: 1,\r\n          //   tag_name: \"diaose\",\r\n          //   x_ul: 100,\r\n          //   y_ul: 200,\r\n          //   wid: 50,\r\n          //   hei: 50\r\n          // },\r\n        ] // 表示图片矩形标记信息\r\n      },\r\n      // pics是所有的图片信息，我们需要在增删图片、修改标注时维护这部分内容，初始时通过后端接口获得这部分内容，但其实仅修改标注时不维护，直接将修改的信息上传后端就行，待定\r\n      // 同时，这部分的初始化是通过读取整个annotation文件得到的，annotation里面不止这几个项，其余的项我的想法是放在与下面pics平行的位置，用一个rest来暂存多余内容，在我们修改完标注后结合pics和data\r\n      pics: [\r\n        // {\r\n        //   cropImage: 'https://seopic.699pic.com/photo/50041/3365.jpg_wh1200.jpg',\r\n        //   annotations: [\r\n        //     { id: 1, catagory_id: 0, bbox: [11, 22, 10, 5] },\r\n        //     { id: 2, catagory_id: 1, bbox: [35, 44, 20, 14] }\r\n        //   ]\r\n        // },\r\n      ],\r\n      altURL: 'https://img-qn.51miz.com/2018/02/08/06/2018020806948082_P1330830_60ced2dfO.jpg',\r\n      active: 0, // 当前图片序号\r\n      picTotal: 10, // 照片总数，需要在初始时进行加载\r\n\r\n      // 所有的标签名及其id\r\n      tags: [\r\n        // {\r\n        //   tagName: '缺陷',\r\n        //   tag: '0x0001'\r\n        // },\r\n      ],\r\n\r\n      //下面的几个内容不用管，都是插件使用的部分\r\n      allInfo: [], // 图片的矩形标记信息集合\r\n      imageInfo: [], // 存储图片原始信息\r\n\r\n      innerVisible: false,\r\n      innerForm: {\r\n        tagName: '',\r\n        tag: ''\r\n      },\r\n\r\n      tep_rules: {\r\n        tagName: [{ required: true, message: '请输入', trigger: 'blur' }],\r\n        tag: [{ required: true, message: '请输入', trigger: 'blur' }]\r\n      }\r\n    }\r\n  },\r\n  computed:{\r\n    \r\n  },\r\n  created() {\r\n    this.init_pics()\r\n  },\r\n  mounted() {\r\n    window.addEventListener(\"beforeunload\", this.leaveconfirm, false)\r\n    const screenWidth = window.innerWidth;\r\n    const screenHeight = window.innerHeight;\r\n    // 计算距离右边整个屏幕宽度的80%的距离\r\n    this.rightDistance = screenWidth * 0.65;\r\n    // 计算距离底部整个屏幕高度的10%的距离\r\n    this.bottomDistance = screenHeight * 0.08;\r\n  },\r\n\r\n  beforeDestroy(){\r\n    window.addEventListener(\"beforeunload\", this.leaveconfirm, false)\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n    if (this.modified) { // 此处为个人项目条件判断，当条件成立时才执行路由守卫\r\n      this.$confirm('当前信息未保存，离开页面将会放弃所有修改数据，', '提示', {\r\n        closeOnClickModal: false,\r\n        confirmButtonText: '保存',\r\n        cancelButtonText: '保存',\r\n        type: 'warning'\r\n      }).then(() => {\r\n      \t// 点击确定则往下执行\r\n        //this.saveAll()\r\n        next()\r\n      }).catch(() => {\r\n\t\t// 取消则关闭弹窗不执行\r\n\t  })\r\n    } else {\r\n      // 条件不成立则继续往下执行\r\n      next()\r\n    }\r\n  },\r\n  methods: {\r\n    leaveconfirm(event){\r\n      if (this.modified) {\r\n        event.preventDefault()\r\n        event.returnValue = '您在页面编辑了未保存，是否确认离开'\r\n        return '您在页面编辑了未保存，是否确认离开'\r\n      }\r\n    },\r\n    handleFileInputClick() {\r\n      this.$refs.fileInput.click(); // 触发文件选择输入框的点击事件\r\n    },\r\n    saveAll(){\r\n      const formData = new FormData();\r\n      axios.post('http://127.0.0.1:5000/Dataset/save', formData,{\r\n        headers: { 'Authorization': 'Bearer ' + Cookies.get('token')},\r\n      }).then(res=>{\r\n        console.log('保存所有信息到后端')\r\n        this.modified = false\r\n        this.$router.push('/user')\r\n      }).catch(error=>{\r\n        console.log('保存所有信息失败',error);\r\n        return null;\r\n      })\r\n    },\r\n    saveAnno(){\r\n      const formData = new FormData();\r\n      formData.append(\"image_id\", this.currentInfo.uuid);\r\n      var list = [];\r\n      for(let i =0;i<this.currentInfo.data.length;i++)\r\n      {\r\n        var box = [];\r\n        box.push(this.currentInfo.data[i].x_ul);\r\n        box.push(this.currentInfo.data[i].y_ul);\r\n        box.push(this.currentInfo.data[i].wid);\r\n        box.push(this.currentInfo.data[i].hei);\r\n        let obj = {\r\n          area: this.currentInfo.data[i].area,\r\n          iscrowd: this.currentInfo.data[i].iscrowd,\r\n          image_id: this.currentInfo.uuid,\r\n          bbox: box,\r\n          category_id: this.currentInfo.data[i].tag_id,\r\n          id: this.currentInfo.data[i].id,\r\n          ignore: this.currentInfo.data[i].ignore,\r\n          segmentation: this.currentInfo.data[i].segmentation,\r\n        };\r\n        list.push(obj);\r\n      }\r\n      formData.append(\"annotations\", JSON.stringify(list));\r\n      axios.post(\"http://127.0.0.1:5000/Dataset/workspace/modify-annotation\",formData,{\r\n        headers: { 'Authorization': 'Bearer ' + Cookies.get('token')},\r\n      }).then(res=>{\r\n        console.log(\"保存所有标注信息到后端成功\")\r\n        this.modified = true;\r\n      }).catch(error=>{\r\n        console.log(\"保存所有标注信息到后端失败\", error);\r\n        return null;\r\n      });\r\n    },\r\n\r\n    handleFileChange(event) {\r\n      this.selectedFile = event.target.files[0];\r\n    },\r\n    // 上传文件\r\n    uploadFile() {\r\n      const formData = new FormData();\r\n      formData.append('proc_type', 'add');\r\n      formData.append('data_type', 'image');\r\n      formData.append('image', this.selectedFile);\r\n\r\n      // 使用 axios 或其他 HTTP 客户端库发送 POST 请求到后端\r\n      // 你需要替换下面的 URL 为后端接收上传的 API 端点\r\n      axios.post('http://127.0.0.1:5000/Dataset/workspace/modify', formData, {\r\n        headers: {\r\n          'Authorization': 'Bearer ' + Cookies.get('token'),\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      })\r\n      .then(response => {\r\n        // 处理成功上传后的响应\r\n        console.log('上传成功', response.data);\r\n        var id_new = response.data.image_id;\r\n        let url_new = \"http://127.0.0.1:5000/Dataset/workspace/image/\" + id_new;\r\n        axios.get(url_new, {\r\n          headers: {\r\n            'Authorization': 'Bearer ' + Cookies.get('token'),\r\n          },\r\n          responseType: 'blob',\r\n        }).then(res=>{\r\n          let blob = new Blob([res.data]);\r\n          console.log(blob, \"BLOB\")\r\n          let image_url = URL.createObjectURL(blob);\r\n          this.pics.push({\r\n            id: id_new,\r\n            url: image_url\r\n          })\r\n          console.log(\"更新pics成功\")\r\n          this.modified = true;\r\n        }).catch(error => {\r\n            console.log(\"更新pics出错\", error);\r\n            return null;\r\n          });\r\n      }).catch(error => {\r\n        // 处理上传失败的情况\r\n        console.error('上传失败', error);\r\n      });\r\n    },\r\n\r\n    init_pics(){\r\n      axios.get('http://127.0.0.1:5000/Dataset/workspace', {\r\n        headers: {\r\n          'Authorization': 'Bearer ' + Cookies.get('token'),\r\n        }\r\n      }).then(res => {\r\n        console.log(res, \"相应信息\")\r\n        //需要更新的信息有：pics，active，picTotal，tags\r\n        this.picTotal = res.data.image_count;\r\n        console.log(this.picTotal, \"图片总数\");\r\n        this.active = 0;\r\n        var id_list = res.data.image_ids;\r\n        console.log(id_list, \"id列表\");\r\n        const baseurl = \"http://127.0.0.1:5000/Dataset/workspace/image/\";\r\n        var urlset = id_list.map((number) => {\r\n          return baseurl + number;\r\n        });\r\n        let cate = res.data.categories;\r\n        for(let i=0; i<cate.length;i++)\r\n        {\r\n          var item = cate[i];\r\n          var newTag = {\r\n            tagName: item.name,\r\n            tag: item.id\r\n          };\r\n          this.tags.push(newTag)\r\n        }\r\n        \r\n\r\n        // 使用Promise.all来等待所有图像请求完成\r\n        Promise.all(urlset.map(url => {\r\n          return axios.get(url, {\r\n            headers: {\r\n              'Authorization': 'Bearer ' + Cookies.get('token'),\r\n            },\r\n            responseType: 'blob',\r\n          }).then(res => {\r\n            let blob = new Blob([res.data]);\r\n            console.log(blob, \"BLOB\")\r\n            let image_url = URL.createObjectURL(blob);\r\n            console.log(image_url, \"IMAGE_URL\")\r\n            return image_url;\r\n          }).catch(error => {\r\n            console.log(\"获取图片出错\", error);\r\n            return null;\r\n          });\r\n        })).then(imgUrls => {\r\n          // imgUrls数组中包含了所有图像的URL，按照顺序与id_list对应\r\n          for (let i = 0; i < id_list.length; i++) {\r\n            let id_ = id_list[i];\r\n            let url_ = imgUrls[i];\r\n            let obj = { id: id_, url: url_ }\r\n            this.pics.push(obj);\r\n          }\r\n          this.currentInfo.currentBaseImage=this.already_src\r\n          console.log(this.pics, \"pics\");\r\n        });\r\n      });\r\n    },\r\n    highlight(id) {\r\n      var canvas = document.getElementById(\"highlighted\")\r\n      var ctx = canvas.getContext(\"2d\")\r\n      console.log(\"hightlight\", id)\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      for (const box of this.currentInfo.data){\r\n        if (box.id === id){\r\n          ctx.strokeStyle = 'yellow'\r\n          ctx.lineWidth = 4\r\n          console.log(box.x_ul, box.y_ul, box.wid, box.hei)\r\n          ctx.strokeRect(box.x_ul, box.y_ul, box.wid, box.hei)\r\n          this.highlight_id = id\r\n        }\r\n      }\r\n    },\r\n    \r\n    //canvas基础的画框操作\r\n    drawBoxes() {\r\n      var canvas = document.getElementById(\"anno_canvas\")\r\n      var ctx = canvas.getContext(\"2d\")\r\n      console.log(\"drawBoxes\")\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      for (const box of this.currentInfo.data) {\r\n        ctx.strokeStyle = 'red'\r\n        ctx.lineWidth = 2\r\n        console.log(box.x_ul, box.y_ul, box.wid, box.hei)\r\n        ctx.strokeRect(box.x_ul, box.y_ul, box.wid, box.hei)\r\n      }\r\n      console.log(this.currentInfo.data)\r\n    },\r\n    //标注框的删除函数\r\n    del_anno(id) {\r\n      this.currentInfo.data = this.currentInfo.data.filter(item => item.id !== id)\r\n      if(this.highlight_id === id){\r\n        var canvas = document.getElementById(\"highlighted\")\r\n        var ctx = canvas.getContext(\"2d\")\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      }\r\n      this.drawBoxes()\r\n      this.modified = true;\r\n    },\r\n\r\n    //-----------------------------------------------------------------------------这部分为插件所需要的函数---------------------------------------------------------------------\r\n    /**记录图片当前的大小和原始大小 data={rawW,rawH,currentW,currentH} */\r\n    onImageLoad(data) {\r\n      console.log(data)\r\n      this.imageInfo = data\r\n    },\r\n    // 当控件准备完成后回调，参数为 uniqueKey\r\n    onReady() {\r\n      console.log(\"onready\")\r\n      // let markerDiv = document.getElementsByClassName('vmr-ai-panel')\r\n      // let innnerDiv = markerDiv[0].firstChild\r\n      // let markerImg = document.getElementsByClassName('vmr-ai-raw-image')\r\n      // let markerMask = document.getElementsByClassName('vmr-ai-raw-image-mask')\r\n      // markerDiv[0].setAttribute('style', 'position: relative; overflow: hidden; width: 60%; height: 60%;')\r\n      // innnerDiv.setAttribute('style', 'position: relative; overflow: hidden;')\r\n      // markerImg[0].setAttribute('style', 'display: block; position: absolute; user-select: none; width:700px; height: 500px;')\r\n      // markerMask[0].setAttribute('style', 'user-select: none; position: absolute; cursor: crosshair; left: 0px; top: 0px;width:700px; height: 500px;')\r\n    },\r\n    /**\r\n   * 画框后回调,data 和 uniqueKey先不用了\r\n   */\r\n    onDrawOne(data, uniqueKey) {\r\n      if (!this.selected.name || !this.selected.value) {\r\n        this.$message.info('请先设置标签')\r\n        this.$refs['aiPanel-editor'].getMarker().clearData()\r\n        return\r\n      }\r\n      let name = data.tagName === '请选择或添加新标签' ? this.selected.name : data.tagName\r\n      let tagValue = data.tagName === '请选择或添加新标签' ? this.selected.value : data.tag\r\n      this.$refs['aiPanel-editor'].getMarker().setTag({\r\n        tagName: name,\r\n        tag: tagValue\r\n      })\r\n      console.log(\"onDrawOne\", uniqueKey)\r\n    },\r\n    /**\r\n     * 当选中图片上的标注框时回调，参数为data【标注数据】, uniqueKey\r\n     */\r\n    selectOne(uniqueKey) {\r\n      console.log(\"selectOne\", uniqueKey, this.data)\r\n    },\r\n    /**\r\n     * 当标注框位置或者标框属性发生改动时回调，参数为data【标注数据】, uniqueKey\r\n     */\r\n    onUpdated(data, uniqueKey) {\r\n      console.log(\"onUpdated\", uniqueKey, data)\r\n    },\r\n\r\n    setTag(v) {\r\n      this.$refs['aiPanel-editor'].getMarker().setTag(v)\r\n    },\r\n    addTag() {\r\n      this.innerVisible = true\r\n      this.innerForm.tagName = ''\r\n      this.innerForm.tag = ''\r\n    },\r\n    delTag(index, tag_id) {\r\n      this.tags.splice(index, 1);\r\n      const formData = new FormData();\r\n      formData.append('proc_type', 'delete');\r\n      formData.append('data_type', 'category');\r\n      formData.append('id', tag_id);\r\n      // 使用 axios 或其他 HTTP 客户端库发送 POST 请求到后端\r\n      // 你需要替换下面的 URL 为后端接收上传的 API 端点\r\n      axios.post('http://127.0.0.1:5000/Dataset/workspace/modify', formData, {\r\n        headers: {\r\n          'Authorization': 'Bearer ' + Cookies.get('token'),\r\n        },\r\n      })\r\n      .then(response => {\r\n        // 处理成功上传后的响应\r\n        console.log('删除成功', response.data);\r\n        this.modified = true;\r\n      })\r\n      .catch(error => {\r\n        // 处理上传失败的情况\r\n        console.error('删除失败', error);\r\n      });\r\n      \r\n    },\r\n    close() {\r\n      this.innerVisible = false\r\n      this.$refs['innerForm'].resetFields()\r\n    },\r\n    beforeClose(done) {\r\n      this.$refs['innerForm'].resetFields()\r\n      done()\r\n    },\r\n    //-----------------------------------------------------------------------------这部分为插件所需要的函数---------------------------------------------------------------------\r\n\r\n    // 添加标签的函数\r\n    createForm(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          for (let index in this.tags) {\r\n            let item = this.tags[index]\r\n            if (\r\n              item.tagName === this.innerForm.tagName\r\n              // || item.tag === this.innerForm.tag\r\n            ) {\r\n              this.$message.warning('标签名已存在，请重新输入')\r\n              return\r\n            }\r\n          }\r\n\r\n          const formData = new FormData();\r\n          formData.append('proc_type', 'add');\r\n          formData.append('data_type', 'category');\r\n          let obj = {\r\n            supercategory: \"none\",\r\n            id: 0,\r\n            name: this.innerForm.tagName,\r\n          }\r\n\r\n          formData.append('category', JSON.stringify(obj));\r\n          console.log(formData, \"传入表单数据\");\r\n\r\n          // 使用 axios 或其他 HTTP 客户端库发送 POST 请求到后端\r\n          // 你需要替换下面的 URL 为后端接收上传的 API 端点\r\n          axios.post('http://127.0.0.1:5000/Dataset/workspace/modify', formData, {\r\n            headers: {\r\n              'Authorization': 'Bearer ' + Cookies.get('token'),\r\n            },\r\n          })\r\n          .then(response => {\r\n            // 处理成功上传后的响应\r\n            console.log('新增成功', response.data);\r\n            this.innerForm.tag = response.data.category_id;\r\n            this.tags.push({\r\n              tagName: this.innerForm.tagName,\r\n              tag: this.innerForm.tag\r\n            });\r\n            this.modified = true;\r\n          })\r\n          .catch(error => {\r\n            // 处理上传失败的情况\r\n            console.error('新增失败', error);\r\n          });\r\n          \r\n          this.innerVisible = false\r\n        }\r\n      })\r\n    },\r\n\r\n    //完成标记，提交标记集合，目前仅提交到data，未更新至pics乃至后端\r\n    submitForm() {\r\n      console.log(this.$refs['aiPanel-editor'])\r\n      let data = this.$refs['aiPanel-editor'].getMarker().getData()\r\n\r\n      this.allInfo = data\r\n      console.log(this.allInfo)\r\n\r\n      let size = {\r\n        width: this.imageInfo.rawW,\r\n        height: this.imageInfo.rawH\r\n      }\r\n      console.log(size.width, size.height)\r\n      console.log(this.currentW, this.currentH)\r\n\r\n      let x_ul = Math.round(((parseFloat(this.allInfo[0].position.x.substring(0, this.allInfo[0].position.x.length - 1)) * size.width) / 100))\r\n      let y_ul = Math.round(((parseFloat(this.allInfo[0].position.y.substring(0, this.allInfo[0].position.y.length - 1)) * size.height) / 100))\r\n      console.log('左上角点坐标', \"(\", x_ul, y_ul, \")\")\r\n      let width = Math.round((((parseFloat(this.allInfo[0].position.x1.substring(0, this.allInfo[0].position.x1.length - 1)) - parseFloat(this.allInfo[0].position.x.substring(0, this.allInfo[0].position.x.length - 1))) * size.width) / 100))\r\n      let height = Math.round((((parseFloat(this.allInfo[0].position.y1.substring(0, this.allInfo[0].position.y1.length - 1)) - parseFloat(this.allInfo[0].position.y.substring(0, this.allInfo[0].position.y.length - 1))) * size.height) / 100))\r\n      console.log(width, height, \"宽度x高度\")\r\n      let newObj = {\r\n        id: new Date().getTime(),\r\n        tag_id: this.allInfo[0].tag,\r\n        tag_name: this.allInfo[0].tagName,\r\n        x_ul: x_ul,\r\n        y_ul: y_ul,\r\n        wid: width,\r\n        hei: height,\r\n        area: width*height,\r\n        iscrowd: 0,\r\n        ignore: 0,\r\n        segmentation: [],\r\n      }\r\n      this.currentInfo.data.push(newObj)\r\n      // 将提交的标注框进行删除\r\n      console.log(this.currentInfo.data)\r\n      this.$refs['aiPanel-editor'].getMarker().clearData()\r\n      console.log(this.currentInfo.data)\r\n      this.drawBoxes()\r\n      this.modified = true;\r\n    },\r\n\r\n    // 点击左右按钮显示更多\r\n    showMore(v) {\r\n      let el = this.$refs.picContainer\r\n      // let percent = (this.active / this.pics.length) * 100\r\n      if (v == 'up') {\r\n        this.active++\r\n        if (this.active >= this.picTotal - 3) {\r\n          // 最后4张图\r\n          this.active = this.pics.length - 3\r\n          return\r\n        }\r\n        if (\r\n          this.pics.length - 3 == this.active &&\r\n          this.pics.length < this.picTotal\r\n        ) {\r\n          this.photoPageIndex++\r\n          this.getPhotos()\r\n          return\r\n        }\r\n      } else {\r\n        this.active--\r\n        if (this.active < 0) this.active = 0\r\n      }\r\n      el.style.transform =\r\n        'translateX(-' + (this.active / this.pics.length) * 100 + '%)'\r\n    },\r\n    //搭配showmore展示所有图片\r\n    getPhotos() {\r\n      this.$nextTick(() => {\r\n        let el = this.$refs.picContainer\r\n        if (el) {\r\n          el.style.width = el.scrollWidth + 'px'\r\n\r\n          el.style.transform =\r\n            'translateX(-' + (this.active / this.pics.length) * 100 + '%)'\r\n        }\r\n      })\r\n    },\r\n\r\n    /**得到当前点击图片，将信息更新到currentInfo*/\r\n\r\n    activePic(v, currentIndex, arrayId) {\r\n      // 写回data\r\n      if(this.currentInfo.currentBaseImage != v)\r\n      {\r\n        var canvas = document.getElementById(\"highlighted\")\r\n        var ctx = canvas.getContext(\"2d\")\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        this.currentInfo.data = []\r\n        this.currentInfo.currentBaseImage = v\r\n        this.active = arrayId\r\n        // const fileExtension = '.jpg_wh1200.jpg'\r\n        // const extensionIndex = this.currentInfo.currentBaseImage.lastIndexOf(fileExtension)\r\n\r\n        // if (extensionIndex !== -1) {\r\n        //   const startIndex = Math.max(extensionIndex - 5, 0)\r\n        //   this.currentInfo.uuid = this.currentInfo.currentBaseImage.slice(startIndex, extensionIndex)\r\n        // }\r\n        this.currentInfo.uuid = currentIndex\r\n        console.log(this.currentInfo.uuid, \"图片编号\")\r\n        // 获取图片的原始宽高\r\n        let attr_url = 'http://127.0.0.1:5000/Dataset/workspace/image-attribute/' + this.currentInfo.uuid\r\n        console.log(attr_url, \"访问属性的url\")\r\n        axios.get(attr_url, {\r\n          headers: {\r\n            'Authorization': 'Bearer ' + Cookies.get('token'),\r\n          }\r\n        }).then(res =>{\r\n          this.currentInfo.rawH = res.data.image_attribute.height\r\n          this.currentInfo.rawW = res.data.image_attribute.width\r\n        }).catch(error=>{\r\n          console.log(error, \"获取图片长宽失败\")\r\n          return null\r\n        })\r\n        console.log(this.currentInfo)\r\n        // console.log(this.currentInfo.uuid)\r\n\r\n        let anno_url = 'http://127.0.0.1:5000/Dataset/workspace/annotation/' + this.currentInfo.uuid\r\n        axios.get(anno_url, {\r\n          headers: {\r\n            'Authorization': 'Bearer ' + Cookies.get('token'),\r\n          }\r\n        }).then(res =>{\r\n          console.log(res.data.annotations, \"标注信息\");\r\n          for(let i=0; i<res.data.annotations.length;i++)\r\n          {\r\n            let item = res.data.annotations[i];\r\n            // console.log(item,\"项目\")\r\n            var name = \"\";\r\n            // console.log(this.tags, \"全部标签\")\r\n            for(let j=0;j<this.tags.length;j++)\r\n            {\r\n              if(this.tags[j].tag == item.category_id)\r\n              {\r\n                name = this.tags[j].tagName;\r\n                break;\r\n              }\r\n            };\r\n            let newAnno = {\r\n              id: item.id,\r\n              tag_id: item.category_id,\r\n              tag_name: name,\r\n              x_ul: item.bbox[0],\r\n              y_ul: item.bbox[1],\r\n              wid: item.bbox[2],\r\n              hei: item.bbox[3],\r\n              area: item.area,\r\n              iscrowd: item.iscrowd,\r\n              ignore: item.ignore,\r\n              segmentation: item.segmentation\r\n            };\r\n            this.currentInfo.data.push(newAnno);\r\n          }\r\n          console.log(this.currentInfo.data, \"后端导入数据集成功\")\r\n          this.drawBoxes();\r\n        }).catch(error=>{\r\n          console.log(error, \"获取图片标注信息失败\")\r\n          return null\r\n        })\r\n      }\r\n      \r\n      \r\n    },\r\n\r\n    // handleChange(label) {\r\n    //   console.log(label)\r\n    // },\r\n\r\n    // 此处要有删除图片的操作实现\r\n    delPic() {\r\n      if (this.active < 0) {\r\n        alert('请先选择一张图片再进行删除')\r\n      }\r\n      else {\r\n        this.pics.splice(this.active, 1)\r\n        this.active = -1\r\n        this.currentInfo.currentBaseImage = this.altURL\r\n        //发信号给后端\r\n        const formData = new FormData();\r\n        formData.append('proc_type', 'delete');\r\n        formData.append('data_type', 'image');\r\n        formData.append('id', this.currentInfo.uuid);\r\n\r\n        // 使用 axios 或其他 HTTP 客户端库发送 POST 请求到后端\r\n        // 你需要替换下面的 URL 为后端接收上传的 API 端点\r\n        axios.post('http://127.0.0.1:5000/Dataset/workspace/modify', formData, {\r\n          headers: {\r\n            'Authorization': 'Bearer ' + Cookies.get('token'),\r\n          },\r\n        })\r\n        .then(response => {\r\n          // 处理成功上传后的响应\r\n          console.log('删除成功', response.data);\r\n          this.modified = true;\r\n        })\r\n        .catch(error => {\r\n          // 处理上传失败的情况\r\n          console.error('删除失败', error);\r\n        });\r\n\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n  \r\n<style lang=\"scss\" scoped>\r\n.pics {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 10%;\r\n  overflow: hidden;\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  .arrow {\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 50%;\r\n    background-image: url('@/assets/images/left_arrow.jpg');\r\n    background-repeat: no-repeat;\r\n    background-size: contain;\r\n\r\n    &.arrow-right {\r\n      transform: rotate(180deg);\r\n    }\r\n  }\r\n\r\n  .pic-container {\r\n    width: calc(100% - 30px);\r\n    height: 100%;\r\n    margin: 0 auto;\r\n    overflow: hidden;\r\n\r\n    .pic-box {\r\n      height: 100%;\r\n      // min-width: 1180px;\r\n      min-width: calc(100% - 30px);\r\n      transition: all 0.5s linear;\r\n      display: flex;\r\n      flex-wrap: nowrap;\r\n    }\r\n\r\n    .pic {\r\n      float: left;\r\n      border: 1px solid #ccc;\r\n      box-sizing: border-box;\r\n      margin-right: 10px;\r\n      width: 185px;\r\n      height: 114px;\r\n\r\n      .info {\r\n        width: 183px;\r\n        height: 100%;\r\n        background-size: 100%;\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        position: relative;\r\n\r\n        &:hover {\r\n          border: 1px solid skyblue;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.height-control {\r\n    // width: 1180px;\r\n    position: relative;\r\n    width: calc(100% - 30px);\r\n    height: 80%;\r\n    margin: 0 auto;\r\n    overflow: hidden;}\r\n\r\n\r\n.save-button{\r\n  width:100%;\r\n  margin-bottom:10px\r\n}\r\n.tagList {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n\r\n  .title {\r\n    text-align: center;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .handleButton {\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .tags {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px 0;\r\n\r\n    .el-icon-delete {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n\r\n  .annos {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px 0;\r\n\r\n    .el-icon-delete {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n\r\n.img-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  position: relative;\r\n}\r\n\r\n// .image-wrapper {\r\n//   position: absolute;\r\n//   top: 0;\r\n//   left: 0;\r\n//   width: 100%;\r\n//   height: 100%;\r\n// }\r\n\r\n.limited-image,\r\n#anno_canvas,\r\n#highlighted {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  /* 设置宽度为100%以适应父元素 */\r\n  object-fit: contain;\r\n}\r\n\r\n.vertical-button\r\n{\r\n  margin: 5px;\r\n}\r\n.custom-container {\r\n  background-color: #f0f0f0; /* 设置背景色为浅灰色 */\r\n  border: 1px solid #ccc; /* 添加1像素的灰色边框 */\r\n  // padding: 10px; /* 可选：添加内边距以增加边框和内容之间的间距 */\r\n}\r\n\r\n\r\n</style>\r\n  \r\n  "],"mappings":";;;;AAgNA,SAAAA,QAAA;AACA,OAAAC,KAAA;AACA,OAAAC,OAAA;AACA,OAAAC,kBAAA;AACA,OAAAC,SAAA;AACA;;AAIA;EACAC,IAAA;EACAC,UAAA;IACA,aAAAN,QAAA;IACA,eAAAG,kBAAA;IACA;IACAC;EACA;EACAG,KAAA;IACA;MACAC,QAAA;MACAC,OAAA;MACAC,aAAA;MACAC,cAAA;MACAC,WAAA;MACAC,WAAA;MAEAC,YAAA;MACA;MACA;MACA;MACAC,YAAA;MACA;MACAC,WAAA;QACAC,gBAAA;QAAA;QACA;QACAC,IAAA;QAAA;QACAC,IAAA;QACAC,QAAA;QAAA;QACAC,QAAA;QACAC,IAAA;QAAA;QACA;;QAEA;AACA;AACA;QACAf,IAAA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QAAA,CACA;MACA;;MACA;MACA;MACAgB,IAAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MAAA,CACA;MACAC,MAAA;MACAC,MAAA;MAAA;MACAC,QAAA;MAAA;;MAEA;MACAC,IAAA;QACA;QACA;QACA;QACA;MAAA,CACA;MAEA;MACAC,OAAA;MAAA;MACAC,SAAA;MAAA;;MAEAC,YAAA;MACAC,SAAA;QACAC,OAAA;QACAC,GAAA;MACA;MAEAC,SAAA;QACAF,OAAA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAJ,GAAA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MACA;IACA;EACA;EACAC,QAAA,GAEA;EACAC,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,QAAA;IACAC,MAAA,CAAAC,gBAAA,sBAAAC,YAAA;IACA,MAAAC,WAAA,GAAAH,MAAA,CAAAI,UAAA;IACA,MAAAC,YAAA,GAAAL,MAAA,CAAAM,WAAA;IACA;IACA,KAAAtC,aAAA,GAAAmC,WAAA;IACA;IACA,KAAAlC,cAAA,GAAAoC,YAAA;EACA;EAEAE,cAAA;IACAP,MAAA,CAAAC,gBAAA,sBAAAC,YAAA;EACA;EACAM,iBAAAC,EAAA,EAAAC,IAAA,EAAAC,IAAA;IACA,SAAA7C,QAAA;MAAA;MACA,KAAA8C,QAAA;QACAC,iBAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,IAAA;MACA,GAAAC,IAAA;QACA;QACA;QACAN,IAAA;MACA,GAAAO,KAAA;QACA;MAAA,CACA;IACA;MACA;MACAP,IAAA;IACA;EACA;EACAQ,OAAA;IACAjB,aAAAkB,KAAA;MACA,SAAAtD,QAAA;QACAsD,KAAA,CAAAC,cAAA;QACAD,KAAA,CAAAE,WAAA;QACA;MACA;IACA;IACAC,qBAAA;MACA,KAAAC,KAAA,CAAAC,SAAA,CAAAC,KAAA;IACA;;IACAC,QAAA;MACA,MAAAC,QAAA,OAAAC,QAAA;MACAtE,KAAA,CAAAuE,IAAA,uCAAAF,QAAA;QACAG,OAAA;UAAA,6BAAAvE,OAAA,CAAAwE,GAAA;QAAA;MACA,GAAAf,IAAA,CAAAgB,GAAA;QACAC,OAAA,CAAAC,GAAA;QACA,KAAArE,QAAA;QACA,KAAAsE,OAAA,CAAAC,IAAA;MACA,GAAAnB,KAAA,CAAAoB,KAAA;QACAJ,OAAA,CAAAC,GAAA,aAAAG,KAAA;QACA;MACA;IACA;IACAC,SAAA;MACA,MAAAX,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAY,MAAA,kBAAAlE,WAAA,CAAAM,IAAA;MACA,IAAA6D,IAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,QAAApE,WAAA,CAAAT,IAAA,CAAA8E,MAAA,EAAAD,CAAA,IACA;QACA,IAAAE,GAAA;QACAA,GAAA,CAAAP,IAAA,MAAA/D,WAAA,CAAAT,IAAA,CAAA6E,CAAA,EAAAG,IAAA;QACAD,GAAA,CAAAP,IAAA,MAAA/D,WAAA,CAAAT,IAAA,CAAA6E,CAAA,EAAAI,IAAA;QACAF,GAAA,CAAAP,IAAA,MAAA/D,WAAA,CAAAT,IAAA,CAAA6E,CAAA,EAAAK,GAAA;QACAH,GAAA,CAAAP,IAAA,MAAA/D,WAAA,CAAAT,IAAA,CAAA6E,CAAA,EAAAM,GAAA;QACA,IAAAC,GAAA;UACAC,IAAA,OAAA5E,WAAA,CAAAT,IAAA,CAAA6E,CAAA,EAAAQ,IAAA;UACAC,OAAA,OAAA7E,WAAA,CAAAT,IAAA,CAAA6E,CAAA,EAAAS,OAAA;UACAC,QAAA,OAAA9E,WAAA,CAAAM,IAAA;UACAyE,IAAA,EAAAT,GAAA;UACAU,WAAA,OAAAhF,WAAA,CAAAT,IAAA,CAAA6E,CAAA,EAAAa,MAAA;UACAC,EAAA,OAAAlF,WAAA,CAAAT,IAAA,CAAA6E,CAAA,EAAAc,EAAA;UACAC,MAAA,OAAAnF,WAAA,CAAAT,IAAA,CAAA6E,CAAA,EAAAe,MAAA;UACAC,YAAA,OAAApF,WAAA,CAAAT,IAAA,CAAA6E,CAAA,EAAAgB;QACA;QACAjB,IAAA,CAAAJ,IAAA,CAAAY,GAAA;MACA;MACArB,QAAA,CAAAY,MAAA,gBAAAmB,IAAA,CAAAC,SAAA,CAAAnB,IAAA;MACAlF,KAAA,CAAAuE,IAAA,8DAAAF,QAAA;QACAG,OAAA;UAAA,6BAAAvE,OAAA,CAAAwE,GAAA;QAAA;MACA,GAAAf,IAAA,CAAAgB,GAAA;QACAC,OAAA,CAAAC,GAAA;QACA,KAAArE,QAAA;MACA,GAAAoD,KAAA,CAAAoB,KAAA;QACAJ,OAAA,CAAAC,GAAA,kBAAAG,KAAA;QACA;MACA;IACA;IAEAuB,iBAAAzC,KAAA;MACA,KAAA/C,YAAA,GAAA+C,KAAA,CAAA0C,MAAA,CAAAC,KAAA;IACA;IACA;IACAC,WAAA;MACA,MAAApC,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAY,MAAA;MACAZ,QAAA,CAAAY,MAAA;MACAZ,QAAA,CAAAY,MAAA,eAAAnE,YAAA;;MAEA;MACA;MACAd,KAAA,CAAAuE,IAAA,mDAAAF,QAAA;QACAG,OAAA;UACA,6BAAAvE,OAAA,CAAAwE,GAAA;UACA;QACA;MACA,GACAf,IAAA,CAAAgD,QAAA;QACA;QACA/B,OAAA,CAAAC,GAAA,SAAA8B,QAAA,CAAApG,IAAA;QACA,IAAAqG,MAAA,GAAAD,QAAA,CAAApG,IAAA,CAAAuF,QAAA;QACA,IAAAe,OAAA,sDAAAD,MAAA;QACA3G,KAAA,CAAAyE,GAAA,CAAAmC,OAAA;UACApC,OAAA;YACA,6BAAAvE,OAAA,CAAAwE,GAAA;UACA;UACAoC,YAAA;QACA,GAAAnD,IAAA,CAAAgB,GAAA;UACA,IAAAoC,IAAA,OAAAC,IAAA,EAAArC,GAAA,CAAApE,IAAA;UACAqE,OAAA,CAAAC,GAAA,CAAAkC,IAAA;UACA,IAAAE,SAAA,GAAAC,GAAA,CAAAC,eAAA,CAAAJ,IAAA;UACA,KAAAxF,IAAA,CAAAwD,IAAA;YACAmB,EAAA,EAAAU,MAAA;YACAQ,GAAA,EAAAH;UACA;UACArC,OAAA,CAAAC,GAAA;UACA,KAAArE,QAAA;QACA,GAAAoD,KAAA,CAAAoB,KAAA;UACAJ,OAAA,CAAAC,GAAA,aAAAG,KAAA;UACA;QACA;MACA,GAAApB,KAAA,CAAAoB,KAAA;QACA;QACAJ,OAAA,CAAAI,KAAA,SAAAA,KAAA;MACA;IACA;IAEAxC,UAAA;MACAvC,KAAA,CAAAyE,GAAA;QACAD,OAAA;UACA,6BAAAvE,OAAA,CAAAwE,GAAA;QACA;MACA,GAAAf,IAAA,CAAAgB,GAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;QACA;QACA,KAAAjD,QAAA,GAAAiD,GAAA,CAAApE,IAAA,CAAA8G,WAAA;QACAzC,OAAA,CAAAC,GAAA,MAAAnD,QAAA;QACA,KAAAD,MAAA;QACA,IAAA6F,OAAA,GAAA3C,GAAA,CAAApE,IAAA,CAAAgH,SAAA;QACA3C,OAAA,CAAAC,GAAA,CAAAyC,OAAA;QACA,MAAAE,OAAA;QACA,IAAAC,MAAA,GAAAH,OAAA,CAAAI,GAAA,CAAAC,MAAA;UACA,OAAAH,OAAA,GAAAG,MAAA;QACA;QACA,IAAAC,IAAA,GAAAjD,GAAA,CAAApE,IAAA,CAAAsH,UAAA;QACA,SAAAzC,CAAA,MAAAA,CAAA,GAAAwC,IAAA,CAAAvC,MAAA,EAAAD,CAAA,IACA;UACA,IAAA0C,IAAA,GAAAF,IAAA,CAAAxC,CAAA;UACA,IAAA2C,MAAA;YACA/F,OAAA,EAAA8F,IAAA,CAAAzH,IAAA;YACA4B,GAAA,EAAA6F,IAAA,CAAA5B;UACA;UACA,KAAAvE,IAAA,CAAAoD,IAAA,CAAAgD,MAAA;QACA;;QAGA;QACAC,OAAA,CAAAC,GAAA,CAAAR,MAAA,CAAAC,GAAA,CAAAN,GAAA;UACA,OAAAnH,KAAA,CAAAyE,GAAA,CAAA0C,GAAA;YACA3C,OAAA;cACA,6BAAAvE,OAAA,CAAAwE,GAAA;YACA;YACAoC,YAAA;UACA,GAAAnD,IAAA,CAAAgB,GAAA;YACA,IAAAoC,IAAA,OAAAC,IAAA,EAAArC,GAAA,CAAApE,IAAA;YACAqE,OAAA,CAAAC,GAAA,CAAAkC,IAAA;YACA,IAAAE,SAAA,GAAAC,GAAA,CAAAC,eAAA,CAAAJ,IAAA;YACAnC,OAAA,CAAAC,GAAA,CAAAoC,SAAA;YACA,OAAAA,SAAA;UACA,GAAArD,KAAA,CAAAoB,KAAA;YACAJ,OAAA,CAAAC,GAAA,WAAAG,KAAA;YACA;UACA;QACA,IAAArB,IAAA,CAAAuE,OAAA;UACA;UACA,SAAA9C,CAAA,MAAAA,CAAA,GAAAkC,OAAA,CAAAjC,MAAA,EAAAD,CAAA;YACA,IAAA+C,GAAA,GAAAb,OAAA,CAAAlC,CAAA;YACA,IAAAgD,IAAA,GAAAF,OAAA,CAAA9C,CAAA;YACA,IAAAO,GAAA;cAAAO,EAAA,EAAAiC,GAAA;cAAAf,GAAA,EAAAgB;YAAA;YACA,KAAA7G,IAAA,CAAAwD,IAAA,CAAAY,GAAA;UACA;UACA,KAAA3E,WAAA,CAAAC,gBAAA,QAAAJ,WAAA;UACA+D,OAAA,CAAAC,GAAA,MAAAtD,IAAA;QACA;MACA;IACA;IACA8G,UAAAnC,EAAA;MACA,IAAAoC,MAAA,GAAAC,QAAA,CAAAC,cAAA;MACA,IAAAC,GAAA,GAAAH,MAAA,CAAAI,UAAA;MACA9D,OAAA,CAAAC,GAAA,eAAAqB,EAAA;MACAuC,GAAA,CAAAE,SAAA,OAAAL,MAAA,CAAAM,KAAA,EAAAN,MAAA,CAAAO,MAAA;MACA,WAAAvD,GAAA,SAAAtE,WAAA,CAAAT,IAAA;QACA,IAAA+E,GAAA,CAAAY,EAAA,KAAAA,EAAA;UACAuC,GAAA,CAAAK,WAAA;UACAL,GAAA,CAAAM,SAAA;UACAnE,OAAA,CAAAC,GAAA,CAAAS,GAAA,CAAAC,IAAA,EAAAD,GAAA,CAAAE,IAAA,EAAAF,GAAA,CAAAG,GAAA,EAAAH,GAAA,CAAAI,GAAA;UACA+C,GAAA,CAAAO,UAAA,CAAA1D,GAAA,CAAAC,IAAA,EAAAD,GAAA,CAAAE,IAAA,EAAAF,GAAA,CAAAG,GAAA,EAAAH,GAAA,CAAAI,GAAA;UACA,KAAA5E,YAAA,GAAAoF,EAAA;QACA;MACA;IACA;IAEA;IACA+C,UAAA;MACA,IAAAX,MAAA,GAAAC,QAAA,CAAAC,cAAA;MACA,IAAAC,GAAA,GAAAH,MAAA,CAAAI,UAAA;MACA9D,OAAA,CAAAC,GAAA;MACA4D,GAAA,CAAAE,SAAA,OAAAL,MAAA,CAAAM,KAAA,EAAAN,MAAA,CAAAO,MAAA;MACA,WAAAvD,GAAA,SAAAtE,WAAA,CAAAT,IAAA;QACAkI,GAAA,CAAAK,WAAA;QACAL,GAAA,CAAAM,SAAA;QACAnE,OAAA,CAAAC,GAAA,CAAAS,GAAA,CAAAC,IAAA,EAAAD,GAAA,CAAAE,IAAA,EAAAF,GAAA,CAAAG,GAAA,EAAAH,GAAA,CAAAI,GAAA;QACA+C,GAAA,CAAAO,UAAA,CAAA1D,GAAA,CAAAC,IAAA,EAAAD,GAAA,CAAAE,IAAA,EAAAF,GAAA,CAAAG,GAAA,EAAAH,GAAA,CAAAI,GAAA;MACA;MACAd,OAAA,CAAAC,GAAA,MAAA7D,WAAA,CAAAT,IAAA;IACA;IACA;IACA2I,SAAAhD,EAAA;MACA,KAAAlF,WAAA,CAAAT,IAAA,QAAAS,WAAA,CAAAT,IAAA,CAAA4I,MAAA,CAAArB,IAAA,IAAAA,IAAA,CAAA5B,EAAA,KAAAA,EAAA;MACA,SAAApF,YAAA,KAAAoF,EAAA;QACA,IAAAoC,MAAA,GAAAC,QAAA,CAAAC,cAAA;QACA,IAAAC,GAAA,GAAAH,MAAA,CAAAI,UAAA;QACAD,GAAA,CAAAE,SAAA,OAAAL,MAAA,CAAAM,KAAA,EAAAN,MAAA,CAAAO,MAAA;MACA;MACA,KAAAI,SAAA;MACA,KAAAzI,QAAA;IACA;IAEA;IACA;IACA4I,YAAA7I,IAAA;MACAqE,OAAA,CAAAC,GAAA,CAAAtE,IAAA;MACA,KAAAsB,SAAA,GAAAtB,IAAA;IACA;IACA;IACA8I,QAAA;MACAzE,OAAA,CAAAC,GAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;;IACA;AACA;AACA;IACAyE,UAAA/I,IAAA,EAAAgJ,SAAA;MACA,UAAAC,QAAA,CAAAnJ,IAAA,UAAAmJ,QAAA,CAAAC,KAAA;QACA,KAAAC,QAAA,CAAAC,IAAA;QACA,KAAAzF,KAAA,mBAAA0F,SAAA,GAAAC,SAAA;QACA;MACA;MACA,IAAAxJ,IAAA,GAAAE,IAAA,CAAAyB,OAAA,wBAAAwH,QAAA,CAAAnJ,IAAA,GAAAE,IAAA,CAAAyB,OAAA;MACA,IAAA8H,QAAA,GAAAvJ,IAAA,CAAAyB,OAAA,wBAAAwH,QAAA,CAAAC,KAAA,GAAAlJ,IAAA,CAAA0B,GAAA;MACA,KAAAiC,KAAA,mBAAA0F,SAAA,GAAAG,MAAA;QACA/H,OAAA,EAAA3B,IAAA;QACA4B,GAAA,EAAA6H;MACA;MACAlF,OAAA,CAAAC,GAAA,cAAA0E,SAAA;IACA;IACA;AACA;AACA;IACAS,UAAAT,SAAA;MACA3E,OAAA,CAAAC,GAAA,cAAA0E,SAAA,OAAAhJ,IAAA;IACA;IACA;AACA;AACA;IACA0J,UAAA1J,IAAA,EAAAgJ,SAAA;MACA3E,OAAA,CAAAC,GAAA,cAAA0E,SAAA,EAAAhJ,IAAA;IACA;IAEAwJ,OAAAG,CAAA;MACA,KAAAhG,KAAA,mBAAA0F,SAAA,GAAAG,MAAA,CAAAG,CAAA;IACA;IACAC,OAAA;MACA,KAAArI,YAAA;MACA,KAAAC,SAAA,CAAAC,OAAA;MACA,KAAAD,SAAA,CAAAE,GAAA;IACA;IACAmI,OAAAC,KAAA,EAAApE,MAAA;MACA,KAAAtE,IAAA,CAAA2I,MAAA,CAAAD,KAAA;MACA,MAAA/F,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAY,MAAA;MACAZ,QAAA,CAAAY,MAAA;MACAZ,QAAA,CAAAY,MAAA,OAAAe,MAAA;MACA;MACA;MACAhG,KAAA,CAAAuE,IAAA,mDAAAF,QAAA;QACAG,OAAA;UACA,6BAAAvE,OAAA,CAAAwE,GAAA;QACA;MACA,GACAf,IAAA,CAAAgD,QAAA;QACA;QACA/B,OAAA,CAAAC,GAAA,SAAA8B,QAAA,CAAApG,IAAA;QACA,KAAAC,QAAA;MACA,GACAoD,KAAA,CAAAoB,KAAA;QACA;QACAJ,OAAA,CAAAI,KAAA,SAAAA,KAAA;MACA;IAEA;IACAuF,MAAA;MACA,KAAAzI,YAAA;MACA,KAAAoC,KAAA,cAAAsG,WAAA;IACA;IACAC,YAAAC,IAAA;MACA,KAAAxG,KAAA,cAAAsG,WAAA;MACAE,IAAA;IACA;IACA;;IAEA;IACAC,WAAAC,QAAA;MACA,KAAA1G,KAAA,CAAA0G,QAAA,EAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,SAAAT,KAAA,SAAA1I,IAAA;YACA,IAAAmG,IAAA,QAAAnG,IAAA,CAAA0I,KAAA;YACA,IACAvC,IAAA,CAAA9F,OAAA,UAAAD,SAAA,CAAAC;YACA;YAAA,EACA;cACA,KAAA0H,QAAA,CAAAqB,OAAA;cACA;YACA;UACA;UAEA,MAAAzG,QAAA,OAAAC,QAAA;UACAD,QAAA,CAAAY,MAAA;UACAZ,QAAA,CAAAY,MAAA;UACA,IAAAS,GAAA;YACAqF,aAAA;YACA9E,EAAA;YACA7F,IAAA,OAAA0B,SAAA,CAAAC;UACA;UAEAsC,QAAA,CAAAY,MAAA,aAAAmB,IAAA,CAAAC,SAAA,CAAAX,GAAA;UACAf,OAAA,CAAAC,GAAA,CAAAP,QAAA;;UAEA;UACA;UACArE,KAAA,CAAAuE,IAAA,mDAAAF,QAAA;YACAG,OAAA;cACA,6BAAAvE,OAAA,CAAAwE,GAAA;YACA;UACA,GACAf,IAAA,CAAAgD,QAAA;YACA;YACA/B,OAAA,CAAAC,GAAA,SAAA8B,QAAA,CAAApG,IAAA;YACA,KAAAwB,SAAA,CAAAE,GAAA,GAAA0E,QAAA,CAAApG,IAAA,CAAAyF,WAAA;YACA,KAAArE,IAAA,CAAAoD,IAAA;cACA/C,OAAA,OAAAD,SAAA,CAAAC,OAAA;cACAC,GAAA,OAAAF,SAAA,CAAAE;YACA;YACA,KAAAzB,QAAA;UACA,GACAoD,KAAA,CAAAoB,KAAA;YACA;YACAJ,OAAA,CAAAI,KAAA,SAAAA,KAAA;UACA;UAEA,KAAAlD,YAAA;QACA;MACA;IACA;IAEA;IACAmJ,WAAA;MACArG,OAAA,CAAAC,GAAA,MAAAX,KAAA;MACA,IAAA3D,IAAA,QAAA2D,KAAA,mBAAA0F,SAAA,GAAAsB,OAAA;MAEA,KAAAtJ,OAAA,GAAArB,IAAA;MACAqE,OAAA,CAAAC,GAAA,MAAAjD,OAAA;MAEA,IAAAuJ,IAAA;QACAvC,KAAA,OAAA/G,SAAA,CAAAX,IAAA;QACA2H,MAAA,OAAAhH,SAAA,CAAAV;MACA;MACAyD,OAAA,CAAAC,GAAA,CAAAsG,IAAA,CAAAvC,KAAA,EAAAuC,IAAA,CAAAtC,MAAA;MACAjE,OAAA,CAAAC,GAAA,MAAAzD,QAAA,OAAAC,QAAA;MAEA,IAAAkE,IAAA,GAAA6F,IAAA,CAAAC,KAAA,CAAAC,UAAA,MAAA1J,OAAA,IAAA2J,QAAA,CAAAC,CAAA,CAAAC,SAAA,SAAA7J,OAAA,IAAA2J,QAAA,CAAAC,CAAA,CAAAnG,MAAA,SAAA8F,IAAA,CAAAvC,KAAA;MACA,IAAApD,IAAA,GAAA4F,IAAA,CAAAC,KAAA,CAAAC,UAAA,MAAA1J,OAAA,IAAA2J,QAAA,CAAAG,CAAA,CAAAD,SAAA,SAAA7J,OAAA,IAAA2J,QAAA,CAAAG,CAAA,CAAArG,MAAA,SAAA8F,IAAA,CAAAtC,MAAA;MACAjE,OAAA,CAAAC,GAAA,gBAAAU,IAAA,EAAAC,IAAA;MACA,IAAAoD,KAAA,GAAAwC,IAAA,CAAAC,KAAA,EAAAC,UAAA,MAAA1J,OAAA,IAAA2J,QAAA,CAAAI,EAAA,CAAAF,SAAA,SAAA7J,OAAA,IAAA2J,QAAA,CAAAI,EAAA,CAAAtG,MAAA,SAAAiG,UAAA,MAAA1J,OAAA,IAAA2J,QAAA,CAAAC,CAAA,CAAAC,SAAA,SAAA7J,OAAA,IAAA2J,QAAA,CAAAC,CAAA,CAAAnG,MAAA,UAAA8F,IAAA,CAAAvC,KAAA;MACA,IAAAC,MAAA,GAAAuC,IAAA,CAAAC,KAAA,EAAAC,UAAA,MAAA1J,OAAA,IAAA2J,QAAA,CAAAK,EAAA,CAAAH,SAAA,SAAA7J,OAAA,IAAA2J,QAAA,CAAAK,EAAA,CAAAvG,MAAA,SAAAiG,UAAA,MAAA1J,OAAA,IAAA2J,QAAA,CAAAG,CAAA,CAAAD,SAAA,SAAA7J,OAAA,IAAA2J,QAAA,CAAAG,CAAA,CAAArG,MAAA,UAAA8F,IAAA,CAAAtC,MAAA;MACAjE,OAAA,CAAAC,GAAA,CAAA+D,KAAA,EAAAC,MAAA;MACA,IAAAgD,MAAA;QACA3F,EAAA,MAAA4F,IAAA,GAAAC,OAAA;QACA9F,MAAA,OAAArE,OAAA,IAAAK,GAAA;QACA+J,QAAA,OAAApK,OAAA,IAAAI,OAAA;QACAuD,IAAA,EAAAA,IAAA;QACAC,IAAA,EAAAA,IAAA;QACAC,GAAA,EAAAmD,KAAA;QACAlD,GAAA,EAAAmD,MAAA;QACAjD,IAAA,EAAAgD,KAAA,GAAAC,MAAA;QACAhD,OAAA;QACAM,MAAA;QACAC,YAAA;MACA;MACA,KAAApF,WAAA,CAAAT,IAAA,CAAAwE,IAAA,CAAA8G,MAAA;MACA;MACAjH,OAAA,CAAAC,GAAA,MAAA7D,WAAA,CAAAT,IAAA;MACA,KAAA2D,KAAA,mBAAA0F,SAAA,GAAAC,SAAA;MACAjF,OAAA,CAAAC,GAAA,MAAA7D,WAAA,CAAAT,IAAA;MACA,KAAA0I,SAAA;MACA,KAAAzI,QAAA;IACA;IAEA;IACAyL,SAAA/B,CAAA;MACA,IAAAgC,EAAA,QAAAhI,KAAA,CAAAiI,YAAA;MACA;MACA,IAAAjC,CAAA;QACA,KAAAzI,MAAA;QACA,SAAAA,MAAA,SAAAC,QAAA;UACA;UACA,KAAAD,MAAA,QAAAF,IAAA,CAAA8D,MAAA;UACA;QACA;QACA,IACA,KAAA9D,IAAA,CAAA8D,MAAA,aAAA5D,MAAA,IACA,KAAAF,IAAA,CAAA8D,MAAA,QAAA3D,QAAA,EACA;UACA,KAAA0K,cAAA;UACA,KAAAC,SAAA;UACA;QACA;MACA;QACA,KAAA5K,MAAA;QACA,SAAAA,MAAA,WAAAA,MAAA;MACA;MACAyK,EAAA,CAAAI,KAAA,CAAAC,SAAA,GACA,sBAAA9K,MAAA,QAAAF,IAAA,CAAA8D,MAAA;IACA;IACA;IACAgH,UAAA;MACA,KAAAG,SAAA;QACA,IAAAN,EAAA,QAAAhI,KAAA,CAAAiI,YAAA;QACA,IAAAD,EAAA;UACAA,EAAA,CAAAI,KAAA,CAAA1D,KAAA,GAAAsD,EAAA,CAAAO,WAAA;UAEAP,EAAA,CAAAI,KAAA,CAAAC,SAAA,GACA,sBAAA9K,MAAA,QAAAF,IAAA,CAAA8D,MAAA;QACA;MACA;IACA;IAEA;;IAEAqH,UAAAxC,CAAA,EAAAyC,YAAA,EAAAC,OAAA;MACA;MACA,SAAA5L,WAAA,CAAAC,gBAAA,IAAAiJ,CAAA,EACA;QACA,IAAA5B,MAAA,GAAAC,QAAA,CAAAC,cAAA;QACA,IAAAC,GAAA,GAAAH,MAAA,CAAAI,UAAA;QACAD,GAAA,CAAAE,SAAA,OAAAL,MAAA,CAAAM,KAAA,EAAAN,MAAA,CAAAO,MAAA;QACA,KAAA7H,WAAA,CAAAT,IAAA;QACA,KAAAS,WAAA,CAAAC,gBAAA,GAAAiJ,CAAA;QACA,KAAAzI,MAAA,GAAAmL,OAAA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA,KAAA5L,WAAA,CAAAM,IAAA,GAAAqL,YAAA;QACA/H,OAAA,CAAAC,GAAA,MAAA7D,WAAA,CAAAM,IAAA;QACA;QACA,IAAAuL,QAAA,qEAAA7L,WAAA,CAAAM,IAAA;QACAsD,OAAA,CAAAC,GAAA,CAAAgI,QAAA;QACA5M,KAAA,CAAAyE,GAAA,CAAAmI,QAAA;UACApI,OAAA;YACA,6BAAAvE,OAAA,CAAAwE,GAAA;UACA;QACA,GAAAf,IAAA,CAAAgB,GAAA;UACA,KAAA3D,WAAA,CAAAG,IAAA,GAAAwD,GAAA,CAAApE,IAAA,CAAAuM,eAAA,CAAAjE,MAAA;UACA,KAAA7H,WAAA,CAAAE,IAAA,GAAAyD,GAAA,CAAApE,IAAA,CAAAuM,eAAA,CAAAlE,KAAA;QACA,GAAAhF,KAAA,CAAAoB,KAAA;UACAJ,OAAA,CAAAC,GAAA,CAAAG,KAAA;UACA;QACA;QACAJ,OAAA,CAAAC,GAAA,MAAA7D,WAAA;QACA;;QAEA,IAAA+L,QAAA,gEAAA/L,WAAA,CAAAM,IAAA;QACArB,KAAA,CAAAyE,GAAA,CAAAqI,QAAA;UACAtI,OAAA;YACA,6BAAAvE,OAAA,CAAAwE,GAAA;UACA;QACA,GAAAf,IAAA,CAAAgB,GAAA;UACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA,CAAApE,IAAA,CAAAyM,WAAA;UACA,SAAA5H,CAAA,MAAAA,CAAA,GAAAT,GAAA,CAAApE,IAAA,CAAAyM,WAAA,CAAA3H,MAAA,EAAAD,CAAA,IACA;YACA,IAAA0C,IAAA,GAAAnD,GAAA,CAAApE,IAAA,CAAAyM,WAAA,CAAA5H,CAAA;YACA;YACA,IAAA/E,IAAA;YACA;YACA,SAAA4M,CAAA,MAAAA,CAAA,QAAAtL,IAAA,CAAA0D,MAAA,EAAA4H,CAAA,IACA;cACA,SAAAtL,IAAA,CAAAsL,CAAA,EAAAhL,GAAA,IAAA6F,IAAA,CAAA9B,WAAA,EACA;gBACA3F,IAAA,QAAAsB,IAAA,CAAAsL,CAAA,EAAAjL,OAAA;gBACA;cACA;YACA;YAAA;YACA,IAAAkL,OAAA;cACAhH,EAAA,EAAA4B,IAAA,CAAA5B,EAAA;cACAD,MAAA,EAAA6B,IAAA,CAAA9B,WAAA;cACAgG,QAAA,EAAA3L,IAAA;cACAkF,IAAA,EAAAuC,IAAA,CAAA/B,IAAA;cACAP,IAAA,EAAAsC,IAAA,CAAA/B,IAAA;cACAN,GAAA,EAAAqC,IAAA,CAAA/B,IAAA;cACAL,GAAA,EAAAoC,IAAA,CAAA/B,IAAA;cACAH,IAAA,EAAAkC,IAAA,CAAAlC,IAAA;cACAC,OAAA,EAAAiC,IAAA,CAAAjC,OAAA;cACAM,MAAA,EAAA2B,IAAA,CAAA3B,MAAA;cACAC,YAAA,EAAA0B,IAAA,CAAA1B;YACA;YACA,KAAApF,WAAA,CAAAT,IAAA,CAAAwE,IAAA,CAAAmI,OAAA;UACA;UACAtI,OAAA,CAAAC,GAAA,MAAA7D,WAAA,CAAAT,IAAA;UACA,KAAA0I,SAAA;QACA,GAAArF,KAAA,CAAAoB,KAAA;UACAJ,OAAA,CAAAC,GAAA,CAAAG,KAAA;UACA;QACA;MACA;IAGA;IAEA;IACA;IACA;;IAEA;IACAmI,OAAA;MACA,SAAA1L,MAAA;QACA2L,KAAA;MACA,OACA;QACA,KAAA7L,IAAA,CAAA+I,MAAA,MAAA7I,MAAA;QACA,KAAAA,MAAA;QACA,KAAAT,WAAA,CAAAC,gBAAA,QAAAO,MAAA;QACA;QACA,MAAA8C,QAAA,OAAAC,QAAA;QACAD,QAAA,CAAAY,MAAA;QACAZ,QAAA,CAAAY,MAAA;QACAZ,QAAA,CAAAY,MAAA,YAAAlE,WAAA,CAAAM,IAAA;;QAEA;QACA;QACArB,KAAA,CAAAuE,IAAA,mDAAAF,QAAA;UACAG,OAAA;YACA,6BAAAvE,OAAA,CAAAwE,GAAA;UACA;QACA,GACAf,IAAA,CAAAgD,QAAA;UACA;UACA/B,OAAA,CAAAC,GAAA,SAAA8B,QAAA,CAAApG,IAAA;UACA,KAAAC,QAAA;QACA,GACAoD,KAAA,CAAAoB,KAAA;UACA;UACAJ,OAAA,CAAAI,KAAA,SAAAA,KAAA;QACA;MAEA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}