{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport store from '@/store';\nimport { Notification } from 'element-ui';\nVue.use(VueRouter);\n/* \r\n    1、创建路由组件\r\n    首先在src源代码文件夹中创建一个views文件夹\r\n    views文件夹中放需要的路由组件，一个界面就是一个路由组件\r\n    最后再在路由配置index.js中import进来\r\n*/\nimport User from '../views/User.vue';\nimport Login from '../views/Login.vue';\nimport Main from '../views/Main.vue';\nimport Instruction from '../views/Instruction.vue';\nimport MarkPic from '../views/MarkPic.vue';\nimport Model from '../views/Model.vue';\nimport Detect from '../views/Detect.vue';\nimport Train from '../views/Train.vue';\nimport NotFound from '../views/NotFound.vue';\n/*\r\n    2、将组件和路由做一个映射\r\n    采用数组方式，数组中放键值对\r\n    代表component的对应path\r\n*/\nconst routes = [\n// 主路由\n{\n  path: '/',\n  component: Main,\n  redirect: '/user',\n  //重定向\n  children: [\n  // 子路由\n  {\n    path: 'login',\n    name: 'Login',\n    component: Login\n  },\n  //登录页\n  {\n    path: 'user',\n    name: 'User',\n    component: User\n  },\n  //用户数据管理\n  {\n    path: 'instruction',\n    name: 'Instruction',\n    component: Instruction\n  },\n  //使用说明\n  {\n    path: 'markpic',\n    name: 'Markpic',\n    component: MarkPic\n  },\n  //标注图片\n  {\n    path: 'model',\n    component: Model,\n    redirect: '/model/train',\n    children: [{\n      path: 'detect',\n      component: Detect,\n      name: 'Detect'\n    }, {\n      path: 'train',\n      component: Train,\n      name: 'Train'\n    }]\n  } //检测或者训练\n  ]\n}, {\n  path: '*',\n  component: NotFound\n} //404\n];\n/*\r\n    3、创建router实例，然后传router配置\r\n*/\nconst router = new VueRouter({\n  routes,\n  mode: \"history\"\n});\n/*\r\n这样做的目的是为了避免在使用 push 方法进行导航时，如果出现错误（例如路由跳转失败）导致的控制台报错。\r\n通过添加 .catch(err => err)，错误将被捕捉并作为结果返回，从而防止错误的抛出。\r\n*/\nconst originalPush = VueRouter.prototype.push;\nVueRouter.prototype.push = function push(location) {\n  return originalPush.call(this, location).catch(err => err);\n};\n//添加全局导航守卫\nrouter.beforeEach((to, from, next) => {\n  //判断token存不存在即登没登陆\n  const token = store.state.user.userInfo.cookie;\n  if (!token && (to.name === 'User' || to.name === 'Loadpic' || to.name === 'Markpic' || to.name === 'Detect' || to.name === 'Train')) {\n    //未登录需要跳转至登录页\n    next({\n      name: 'Login'\n    });\n    Notification({\n      title: '消息',\n      message: '您还未登录',\n      position: 'bottom-right',\n      type: 'warning'\n    });\n  }\n  if (token && to.name === 'Login') {\n    next({\n      name: 'User'\n    });\n  }\n  next();\n});\n//  4、向外暴露，在main.js中import挂载到根节点上\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","store","Notification","use","User","Login","Main","Instruction","MarkPic","Model","Detect","Train","NotFound","routes","path","component","redirect","children","name","router","mode","originalPush","prototype","push","location","call","catch","err","beforeEach","to","from","next","token","state","user","userInfo","cookie","title","message","position","type"],"sources":["/home/ubuntu/platform/client/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport VueRouter from 'vue-router'\r\nimport store from '@/store'\r\nimport { Notification } from 'element-ui'\r\nVue.use(VueRouter)\r\n/* \r\n    1、创建路由组件\r\n    首先在src源代码文件夹中创建一个views文件夹\r\n    views文件夹中放需要的路由组件，一个界面就是一个路由组件\r\n    最后再在路由配置index.js中import进来\r\n*/\r\nimport User from '../views/User.vue'\r\nimport Login from '../views/Login.vue'\r\nimport Main from '../views/Main.vue'\r\nimport Instruction from '../views/Instruction.vue'\r\nimport MarkPic from '../views/MarkPic.vue'\r\nimport Model from '../views/Model.vue'\r\nimport Detect from '../views/Detect.vue'\r\nimport Train from '../views/Train.vue'\r\nimport NotFound from '../views/NotFound.vue'\r\n/*\r\n    2、将组件和路由做一个映射\r\n    采用数组方式，数组中放键值对\r\n    代表component的对应path\r\n*/\r\nconst routes = [\r\n    // 主路由\r\n    {\r\n        path: '/',\r\n        component: Main,\r\n        redirect: '/user',  //重定向\r\n        children: [\r\n            // 子路由\r\n            { path: 'login', name: 'Login', component: Login },//登录页\r\n            { path: 'user', name: 'User', component: User },  //用户数据管理\r\n            { path: 'instruction', name: 'Instruction', component: Instruction },    //使用说明\r\n            { path: 'markpic', name: 'Markpic', component: MarkPic }, //标注图片\r\n            {\r\n                path: 'model',\r\n                component: Model,\r\n                redirect: '/model/train',\r\n                children: [\r\n                    { path: 'detect', component: Detect, name: 'Detect' },\r\n                    { path: 'train', component: Train, name: 'Train' }\r\n                ]\r\n            } //检测或者训练\r\n        ]\r\n    },\r\n    { path: '*', component: NotFound } //404\r\n]\r\n/*\r\n    3、创建router实例，然后传router配置\r\n*/\r\nconst router = new VueRouter({\r\n    routes,\r\n    mode: \"history\"\r\n})\r\n/*\r\n这样做的目的是为了避免在使用 push 方法进行导航时，如果出现错误（例如路由跳转失败）导致的控制台报错。\r\n通过添加 .catch(err => err)，错误将被捕捉并作为结果返回，从而防止错误的抛出。\r\n*/\r\nconst originalPush = VueRouter.prototype.push\r\nVueRouter.prototype.push = function push(location) {\r\n    return originalPush.call(this, location).catch(err => err)\r\n}\r\n//添加全局导航守卫\r\nrouter.beforeEach((to, from, next) => {\r\n    //判断token存不存在即登没登陆\r\n    const token = store.state.user.userInfo.cookie\r\n    if (!token && (to.name === 'User' || to.name === 'Loadpic' || to.name === 'Markpic' || to.name==='Detect' || to.name==='Train')) {\r\n        //未登录需要跳转至登录页\r\n        next({ name: 'Login' })\r\n        Notification({\r\n            title: '消息',\r\n            message: '您还未登录',\r\n            position: 'bottom-right',\r\n            type: 'warning'\r\n        })\r\n    }\r\n    if (token && to.name === 'Login') {\r\n        next({ name: 'User' })\r\n    }\r\n    next()\r\n})\r\n//  4、向外暴露，在main.js中import挂载到根节点上\r\nexport default router"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}